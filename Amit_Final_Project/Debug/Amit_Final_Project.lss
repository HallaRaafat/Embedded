
Amit_Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000022e4  00002358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000027f0  00000000  00000000  00002360  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001110  00000000  00000000  00004b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000097f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a3af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 96 10 	call	0x212c	; 0x212c <main>
      7a:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 08 11 	jmp	0x2210	; 0x2210 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 34 11 	jmp	0x2268	; 0x2268 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_init>:
 */
#include "ADC_int.h"
#include <avr/delay.h>

void ADC_init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	ADMUX =0;
     b3e:	e7 e2       	ldi	r30, 0x27	; 39
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	10 82       	st	Z, r1

	set_bit(ADCSRA,7);
     b44:	a6 e2       	ldi	r26, 0x26	; 38
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	e6 e2       	ldi	r30, 0x26	; 38
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	80 68       	ori	r24, 0x80	; 128
     b50:	8c 93       	st	X, r24
	set_bit(ADCSRA,0);
     b52:	a6 e2       	ldi	r26, 0x26	; 38
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	e6 e2       	ldi	r30, 0x26	; 38
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	81 60       	ori	r24, 0x01	; 1
     b5e:	8c 93       	st	X, r24
	set_bit(ADCSRA,1);
     b60:	a6 e2       	ldi	r26, 0x26	; 38
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e6 e2       	ldi	r30, 0x26	; 38
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	82 60       	ori	r24, 0x02	; 2
     b6c:	8c 93       	st	X, r24
	clr_bit(ADCSRA,2);
     b6e:	a6 e2       	ldi	r26, 0x26	; 38
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e6 e2       	ldi	r30, 0x26	; 38
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	8b 7f       	andi	r24, 0xFB	; 251
     b7a:	8c 93       	st	X, r24

}
     b7c:	cf 91       	pop	r28
     b7e:	df 91       	pop	r29
     b80:	08 95       	ret

00000b82 <ADC_read>:

u32 ADC_read(u8 channel)
{
     b82:	df 93       	push	r29
     b84:	cf 93       	push	r28
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	29 97       	sbiw	r28, 0x09	; 9
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	88 87       	std	Y+8, r24	; 0x08
	if(channel !=0 && channel <8)
     b98:	88 85       	ldd	r24, Y+8	; 0x08
     b9a:	88 23       	and	r24, r24
     b9c:	39 f0       	breq	.+14     	; 0xbac <ADC_read+0x2a>
     b9e:	88 85       	ldd	r24, Y+8	; 0x08
     ba0:	88 30       	cpi	r24, 0x08	; 8
     ba2:	20 f4       	brcc	.+8      	; 0xbac <ADC_read+0x2a>
		ADMUX = channel;
     ba4:	e7 e2       	ldi	r30, 0x27	; 39
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	88 85       	ldd	r24, Y+8	; 0x08
     baa:	80 83       	st	Z, r24
	set_bit(ADMUX,6);
     bac:	a7 e2       	ldi	r26, 0x27	; 39
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e7 e2       	ldi	r30, 0x27	; 39
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 64       	ori	r24, 0x40	; 64
     bb8:	8c 93       	st	X, r24
	u32 result=0;
     bba:	1c 82       	std	Y+4, r1	; 0x04
     bbc:	1d 82       	std	Y+5, r1	; 0x05
     bbe:	1e 82       	std	Y+6, r1	; 0x06
     bc0:	1f 82       	std	Y+7, r1	; 0x07
	set_bit(ADCSRA,6);
     bc2:	a6 e2       	ldi	r26, 0x26	; 38
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e6 e2       	ldi	r30, 0x26	; 38
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	80 64       	ori	r24, 0x40	; 64
     bce:	8c 93       	st	X, r24
	while(Get_bit(ADCSRA,4)==0);
     bd0:	e6 e2       	ldi	r30, 0x26	; 38
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
	set_bit(ADCSRA,4);
     bd6:	a6 e2       	ldi	r26, 0x26	; 38
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e6 e2       	ldi	r30, 0x26	; 38
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 61       	ori	r24, 0x10	; 16
     be2:	8c 93       	st	X, r24
	u8 lower=ADCL;
     be4:	e4 e2       	ldi	r30, 0x24	; 36
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	8b 83       	std	Y+3, r24	; 0x03
	u16 higher =(ADCH)<<8;
     bec:	e5 e2       	ldi	r30, 0x25	; 37
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	98 2f       	mov	r25, r24
     bf8:	88 27       	eor	r24, r24
     bfa:	9a 83       	std	Y+2, r25	; 0x02
     bfc:	89 83       	std	Y+1, r24	; 0x01
	result=lower|higher ;
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	28 2f       	mov	r18, r24
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	82 2b       	or	r24, r18
     c0a:	93 2b       	or	r25, r19
     c0c:	cc 01       	movw	r24, r24
     c0e:	a0 e0       	ldi	r26, 0x00	; 0
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	8c 83       	std	Y+4, r24	; 0x04
     c14:	9d 83       	std	Y+5, r25	; 0x05
     c16:	ae 83       	std	Y+6, r26	; 0x06
     c18:	bf 83       	std	Y+7, r27	; 0x07

	return result;
     c1a:	8c 81       	ldd	r24, Y+4	; 0x04
     c1c:	9d 81       	ldd	r25, Y+5	; 0x05
     c1e:	ae 81       	ldd	r26, Y+6	; 0x06
     c20:	bf 81       	ldd	r27, Y+7	; 0x07
}
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	29 96       	adiw	r28, 0x09	; 9
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <Dio_SetPinDirection>:
#include "..\\MCAL\\Utilities.h"
#include "..\\MCAL\\Dio_Reg.h"
#include "..\\MCAL\\Dio_Int.h"

void Dio_SetPinDirection(u8 GroupNo, u8 PinNo, u8 Direction)
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	27 97       	sbiw	r28, 0x07	; 7
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	6a 83       	std	Y+2, r22	; 0x02
     c50:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD)&&(PinNo<=PIN7))
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	84 30       	cpi	r24, 0x04	; 4
     c56:	08 f0       	brcs	.+2      	; 0xc5a <Dio_SetPinDirection+0x22>
     c58:	ed c0       	rjmp	.+474    	; 0xe34 <Dio_SetPinDirection+0x1fc>
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	88 30       	cpi	r24, 0x08	; 8
     c5e:	08 f0       	brcs	.+2      	; 0xc62 <Dio_SetPinDirection+0x2a>
     c60:	e9 c0       	rjmp	.+466    	; 0xe34 <Dio_SetPinDirection+0x1fc>
	{
	if(Direction==INPUT)
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	88 23       	and	r24, r24
     c66:	09 f0       	breq	.+2      	; 0xc6a <Dio_SetPinDirection+0x32>
     c68:	73 c0       	rjmp	.+230    	; 0xd50 <Dio_SetPinDirection+0x118>
	{
		switch(GroupNo)
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	3f 83       	std	Y+7, r19	; 0x07
     c72:	2e 83       	std	Y+6, r18	; 0x06
     c74:	8e 81       	ldd	r24, Y+6	; 0x06
     c76:	9f 81       	ldd	r25, Y+7	; 0x07
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	91 05       	cpc	r25, r1
     c7c:	59 f1       	breq	.+86     	; 0xcd4 <Dio_SetPinDirection+0x9c>
     c7e:	2e 81       	ldd	r18, Y+6	; 0x06
     c80:	3f 81       	ldd	r19, Y+7	; 0x07
     c82:	22 30       	cpi	r18, 0x02	; 2
     c84:	31 05       	cpc	r19, r1
     c86:	2c f4       	brge	.+10     	; 0xc92 <Dio_SetPinDirection+0x5a>
     c88:	8e 81       	ldd	r24, Y+6	; 0x06
     c8a:	9f 81       	ldd	r25, Y+7	; 0x07
     c8c:	00 97       	sbiw	r24, 0x00	; 0
     c8e:	69 f0       	breq	.+26     	; 0xcaa <Dio_SetPinDirection+0x72>
     c90:	5f c0       	rjmp	.+190    	; 0xd50 <Dio_SetPinDirection+0x118>
     c92:	2e 81       	ldd	r18, Y+6	; 0x06
     c94:	3f 81       	ldd	r19, Y+7	; 0x07
     c96:	22 30       	cpi	r18, 0x02	; 2
     c98:	31 05       	cpc	r19, r1
     c9a:	89 f1       	breq	.+98     	; 0xcfe <Dio_SetPinDirection+0xc6>
     c9c:	8e 81       	ldd	r24, Y+6	; 0x06
     c9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ca0:	83 30       	cpi	r24, 0x03	; 3
     ca2:	91 05       	cpc	r25, r1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <Dio_SetPinDirection+0x70>
     ca6:	40 c0       	rjmp	.+128    	; 0xd28 <Dio_SetPinDirection+0xf0>
     ca8:	53 c0       	rjmp	.+166    	; 0xd50 <Dio_SetPinDirection+0x118>
		{
		case GroupA: clr_bit(DDRA, PinNo); break;
     caa:	aa e3       	ldi	r26, 0x3A	; 58
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ea e3       	ldi	r30, 0x3A	; 58
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	48 2f       	mov	r20, r24
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 2e       	mov	r0, r18
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <Dio_SetPinDirection+0x90>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <Dio_SetPinDirection+0x8c>
     ccc:	80 95       	com	r24
     cce:	84 23       	and	r24, r20
     cd0:	8c 93       	st	X, r24
     cd2:	3e c0       	rjmp	.+124    	; 0xd50 <Dio_SetPinDirection+0x118>
		case GroupB: clr_bit(DDRB, PinNo); break;
     cd4:	a7 e3       	ldi	r26, 0x37	; 55
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e7 e3       	ldi	r30, 0x37	; 55
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <Dio_SetPinDirection+0xba>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <Dio_SetPinDirection+0xb6>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	29 c0       	rjmp	.+82     	; 0xd50 <Dio_SetPinDirection+0x118>
		case GroupC: clr_bit(DDRC, PinNo); break;
     cfe:	a4 e3       	ldi	r26, 0x34	; 52
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e4 e3       	ldi	r30, 0x34	; 52
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <Dio_SetPinDirection+0xe4>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <Dio_SetPinDirection+0xe0>
     d20:	80 95       	com	r24
     d22:	84 23       	and	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	14 c0       	rjmp	.+40     	; 0xd50 <Dio_SetPinDirection+0x118>
		case GroupD: clr_bit(DDRD, PinNo); break;
     d28:	a1 e3       	ldi	r26, 0x31	; 49
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e1 e3       	ldi	r30, 0x31	; 49
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <Dio_SetPinDirection+0x10e>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <Dio_SetPinDirection+0x10a>
     d4a:	80 95       	com	r24
     d4c:	84 23       	and	r24, r20
     d4e:	8c 93       	st	X, r24
		}
	}
	if(Direction==OUTPUT)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	09 f0       	breq	.+2      	; 0xd58 <Dio_SetPinDirection+0x120>
     d56:	6e c0       	rjmp	.+220    	; 0xe34 <Dio_SetPinDirection+0x1fc>
	{
		switch(GroupNo)
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	3d 83       	std	Y+5, r19	; 0x05
     d60:	2c 83       	std	Y+4, r18	; 0x04
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	9d 81       	ldd	r25, Y+5	; 0x05
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	91 05       	cpc	r25, r1
     d6a:	49 f1       	breq	.+82     	; 0xdbe <Dio_SetPinDirection+0x186>
     d6c:	2c 81       	ldd	r18, Y+4	; 0x04
     d6e:	3d 81       	ldd	r19, Y+5	; 0x05
     d70:	22 30       	cpi	r18, 0x02	; 2
     d72:	31 05       	cpc	r19, r1
     d74:	2c f4       	brge	.+10     	; 0xd80 <Dio_SetPinDirection+0x148>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	61 f0       	breq	.+24     	; 0xd96 <Dio_SetPinDirection+0x15e>
     d7e:	5a c0       	rjmp	.+180    	; 0xe34 <Dio_SetPinDirection+0x1fc>
     d80:	2c 81       	ldd	r18, Y+4	; 0x04
     d82:	3d 81       	ldd	r19, Y+5	; 0x05
     d84:	22 30       	cpi	r18, 0x02	; 2
     d86:	31 05       	cpc	r19, r1
     d88:	71 f1       	breq	.+92     	; 0xde6 <Dio_SetPinDirection+0x1ae>
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	9d 81       	ldd	r25, Y+5	; 0x05
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	91 05       	cpc	r25, r1
     d92:	e9 f1       	breq	.+122    	; 0xe0e <Dio_SetPinDirection+0x1d6>
     d94:	4f c0       	rjmp	.+158    	; 0xe34 <Dio_SetPinDirection+0x1fc>
		{
		case GroupA: set_bit(DDRA, PinNo); break;
     d96:	aa e3       	ldi	r26, 0x3A	; 58
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	ea e3       	ldi	r30, 0x3A	; 58
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	48 2f       	mov	r20, r24
     da2:	8a 81       	ldd	r24, Y+2	; 0x02
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <Dio_SetPinDirection+0x17c>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <Dio_SetPinDirection+0x178>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	3b c0       	rjmp	.+118    	; 0xe34 <Dio_SetPinDirection+0x1fc>
		case GroupB: set_bit(DDRB, PinNo); break;
     dbe:	a7 e3       	ldi	r26, 0x37	; 55
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e7 e3       	ldi	r30, 0x37	; 55
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <Dio_SetPinDirection+0x1a4>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <Dio_SetPinDirection+0x1a0>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	27 c0       	rjmp	.+78     	; 0xe34 <Dio_SetPinDirection+0x1fc>
		case GroupC: set_bit(DDRC, PinNo); break;
     de6:	a4 e3       	ldi	r26, 0x34	; 52
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e4 e3       	ldi	r30, 0x34	; 52
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <Dio_SetPinDirection+0x1cc>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <Dio_SetPinDirection+0x1c8>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	13 c0       	rjmp	.+38     	; 0xe34 <Dio_SetPinDirection+0x1fc>
		case GroupD: set_bit(DDRD, PinNo); break;
     e0e:	a1 e3       	ldi	r26, 0x31	; 49
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e1 e3       	ldi	r30, 0x31	; 49
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <Dio_SetPinDirection+0x1f4>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <Dio_SetPinDirection+0x1f0>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
	else
	{
		//not reachable
	}

}
     e34:	27 96       	adiw	r28, 0x07	; 7
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	08 95       	ret

00000e46 <Dio_SetPinValue>:
void Dio_SetPinValue(u8 GroupNo, u8 PinNo, u8 Value)
{
     e46:	df 93       	push	r29
     e48:	cf 93       	push	r28
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	27 97       	sbiw	r28, 0x07	; 7
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	6a 83       	std	Y+2, r22	; 0x02
     e5e:	4b 83       	std	Y+3, r20	; 0x03
	if(Value==LOW)
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	88 23       	and	r24, r24
     e64:	09 f0       	breq	.+2      	; 0xe68 <Dio_SetPinValue+0x22>
     e66:	73 c0       	rjmp	.+230    	; 0xf4e <Dio_SetPinValue+0x108>
		{
			switch(GroupNo)
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	3f 83       	std	Y+7, r19	; 0x07
     e70:	2e 83       	std	Y+6, r18	; 0x06
     e72:	8e 81       	ldd	r24, Y+6	; 0x06
     e74:	9f 81       	ldd	r25, Y+7	; 0x07
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	91 05       	cpc	r25, r1
     e7a:	59 f1       	breq	.+86     	; 0xed2 <Dio_SetPinValue+0x8c>
     e7c:	2e 81       	ldd	r18, Y+6	; 0x06
     e7e:	3f 81       	ldd	r19, Y+7	; 0x07
     e80:	22 30       	cpi	r18, 0x02	; 2
     e82:	31 05       	cpc	r19, r1
     e84:	2c f4       	brge	.+10     	; 0xe90 <Dio_SetPinValue+0x4a>
     e86:	8e 81       	ldd	r24, Y+6	; 0x06
     e88:	9f 81       	ldd	r25, Y+7	; 0x07
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	69 f0       	breq	.+26     	; 0xea8 <Dio_SetPinValue+0x62>
     e8e:	5f c0       	rjmp	.+190    	; 0xf4e <Dio_SetPinValue+0x108>
     e90:	2e 81       	ldd	r18, Y+6	; 0x06
     e92:	3f 81       	ldd	r19, Y+7	; 0x07
     e94:	22 30       	cpi	r18, 0x02	; 2
     e96:	31 05       	cpc	r19, r1
     e98:	89 f1       	breq	.+98     	; 0xefc <Dio_SetPinValue+0xb6>
     e9a:	8e 81       	ldd	r24, Y+6	; 0x06
     e9c:	9f 81       	ldd	r25, Y+7	; 0x07
     e9e:	83 30       	cpi	r24, 0x03	; 3
     ea0:	91 05       	cpc	r25, r1
     ea2:	09 f4       	brne	.+2      	; 0xea6 <Dio_SetPinValue+0x60>
     ea4:	40 c0       	rjmp	.+128    	; 0xf26 <Dio_SetPinValue+0xe0>
     ea6:	53 c0       	rjmp	.+166    	; 0xf4e <Dio_SetPinValue+0x108>
			{
			case GroupA: clr_bit(PORTA, PinNo); break;
     ea8:	ab e3       	ldi	r26, 0x3B	; 59
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	eb e3       	ldi	r30, 0x3B	; 59
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <Dio_SetPinValue+0x80>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <Dio_SetPinValue+0x7c>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	3e c0       	rjmp	.+124    	; 0xf4e <Dio_SetPinValue+0x108>
			case GroupB: clr_bit(PORTB, PinNo); break;
     ed2:	a8 e3       	ldi	r26, 0x38	; 56
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e8 e3       	ldi	r30, 0x38	; 56
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <Dio_SetPinValue+0xaa>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <Dio_SetPinValue+0xa6>
     ef4:	80 95       	com	r24
     ef6:	84 23       	and	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	29 c0       	rjmp	.+82     	; 0xf4e <Dio_SetPinValue+0x108>
			case GroupC: clr_bit(PORTC, PinNo); break;
     efc:	a5 e3       	ldi	r26, 0x35	; 53
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e5 e3       	ldi	r30, 0x35	; 53
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <Dio_SetPinValue+0xd4>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <Dio_SetPinValue+0xd0>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <Dio_SetPinValue+0x108>
			case GroupD: clr_bit(PORTD, PinNo); break;
     f26:	a2 e3       	ldi	r26, 0x32	; 50
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e2 e3       	ldi	r30, 0x32	; 50
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <Dio_SetPinValue+0xfe>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <Dio_SetPinValue+0xfa>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
			}
		}
		if(Value==HIGH)
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	09 f0       	breq	.+2      	; 0xf56 <Dio_SetPinValue+0x110>
     f54:	6e c0       	rjmp	.+220    	; 0x1032 <Dio_SetPinValue+0x1ec>
		{
			switch(GroupNo)
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3d 83       	std	Y+5, r19	; 0x05
     f5e:	2c 83       	std	Y+4, r18	; 0x04
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	9d 81       	ldd	r25, Y+5	; 0x05
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	49 f1       	breq	.+82     	; 0xfbc <Dio_SetPinValue+0x176>
     f6a:	2c 81       	ldd	r18, Y+4	; 0x04
     f6c:	3d 81       	ldd	r19, Y+5	; 0x05
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	2c f4       	brge	.+10     	; 0xf7e <Dio_SetPinValue+0x138>
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	9d 81       	ldd	r25, Y+5	; 0x05
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	61 f0       	breq	.+24     	; 0xf94 <Dio_SetPinValue+0x14e>
     f7c:	5a c0       	rjmp	.+180    	; 0x1032 <Dio_SetPinValue+0x1ec>
     f7e:	2c 81       	ldd	r18, Y+4	; 0x04
     f80:	3d 81       	ldd	r19, Y+5	; 0x05
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	71 f1       	breq	.+92     	; 0xfe4 <Dio_SetPinValue+0x19e>
     f88:	8c 81       	ldd	r24, Y+4	; 0x04
     f8a:	9d 81       	ldd	r25, Y+5	; 0x05
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	91 05       	cpc	r25, r1
     f90:	e9 f1       	breq	.+122    	; 0x100c <Dio_SetPinValue+0x1c6>
     f92:	4f c0       	rjmp	.+158    	; 0x1032 <Dio_SetPinValue+0x1ec>
			{
			case GroupA: set_bit(PORTA, PinNo); break;
     f94:	ab e3       	ldi	r26, 0x3B	; 59
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	eb e3       	ldi	r30, 0x3B	; 59
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <Dio_SetPinValue+0x16c>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <Dio_SetPinValue+0x168>
     fb6:	84 2b       	or	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	3b c0       	rjmp	.+118    	; 0x1032 <Dio_SetPinValue+0x1ec>
			case GroupB: set_bit(PORTB, PinNo); break;
     fbc:	a8 e3       	ldi	r26, 0x38	; 56
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e8 e3       	ldi	r30, 0x38	; 56
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <Dio_SetPinValue+0x194>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <Dio_SetPinValue+0x190>
     fde:	84 2b       	or	r24, r20
     fe0:	8c 93       	st	X, r24
     fe2:	27 c0       	rjmp	.+78     	; 0x1032 <Dio_SetPinValue+0x1ec>
			case GroupC: set_bit(PORTC, PinNo); break;
     fe4:	a5 e3       	ldi	r26, 0x35	; 53
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e5 e3       	ldi	r30, 0x35	; 53
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	48 2f       	mov	r20, r24
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 2e       	mov	r0, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <Dio_SetPinValue+0x1bc>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	0a 94       	dec	r0
    1004:	e2 f7       	brpl	.-8      	; 0xffe <Dio_SetPinValue+0x1b8>
    1006:	84 2b       	or	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	13 c0       	rjmp	.+38     	; 0x1032 <Dio_SetPinValue+0x1ec>
			case GroupD: set_bit(PORTD, PinNo); break;
    100c:	a2 e3       	ldi	r26, 0x32	; 50
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e2 e3       	ldi	r30, 0x32	; 50
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <Dio_SetPinValue+0x1e4>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <Dio_SetPinValue+0x1e0>
    102e:	84 2b       	or	r24, r20
    1030:	8c 93       	st	X, r24
			}
		}
}
    1032:	27 96       	adiw	r28, 0x07	; 7
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <Dio_GetPinValue>:
u8 Dio_GetPinValue(u8 GroupNo, u8 PinNo)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <Dio_GetPinValue+0x6>
    104a:	00 d0       	rcall	.+0      	; 0x104c <Dio_GetPinValue+0x8>
    104c:	0f 92       	push	r0
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	8a 83       	std	Y+2, r24	; 0x02
    1054:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_value;
	switch(GroupNo)
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	3d 83       	std	Y+5, r19	; 0x05
    105e:	2c 83       	std	Y+4, r18	; 0x04
    1060:	4c 81       	ldd	r20, Y+4	; 0x04
    1062:	5d 81       	ldd	r21, Y+5	; 0x05
    1064:	41 30       	cpi	r20, 0x01	; 1
    1066:	51 05       	cpc	r21, r1
    1068:	41 f1       	breq	.+80     	; 0x10ba <Dio_GetPinValue+0x76>
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	9d 81       	ldd	r25, Y+5	; 0x05
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	91 05       	cpc	r25, r1
    1072:	34 f4       	brge	.+12     	; 0x1080 <Dio_GetPinValue+0x3c>
    1074:	2c 81       	ldd	r18, Y+4	; 0x04
    1076:	3d 81       	ldd	r19, Y+5	; 0x05
    1078:	21 15       	cp	r18, r1
    107a:	31 05       	cpc	r19, r1
    107c:	61 f0       	breq	.+24     	; 0x1096 <Dio_GetPinValue+0x52>
    107e:	52 c0       	rjmp	.+164    	; 0x1124 <Dio_GetPinValue+0xe0>
    1080:	4c 81       	ldd	r20, Y+4	; 0x04
    1082:	5d 81       	ldd	r21, Y+5	; 0x05
    1084:	42 30       	cpi	r20, 0x02	; 2
    1086:	51 05       	cpc	r21, r1
    1088:	51 f1       	breq	.+84     	; 0x10de <Dio_GetPinValue+0x9a>
    108a:	8c 81       	ldd	r24, Y+4	; 0x04
    108c:	9d 81       	ldd	r25, Y+5	; 0x05
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	91 05       	cpc	r25, r1
    1092:	b9 f1       	breq	.+110    	; 0x1102 <Dio_GetPinValue+0xbe>
    1094:	47 c0       	rjmp	.+142    	; 0x1124 <Dio_GetPinValue+0xe0>
	{
	case GroupA: ret_value=Get_bit(PINA, PinNo); break;
    1096:	e9 e3       	ldi	r30, 0x39	; 57
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	a9 01       	movw	r20, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <Dio_GetPinValue+0x6a>
    10aa:	55 95       	asr	r21
    10ac:	47 95       	ror	r20
    10ae:	8a 95       	dec	r24
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <Dio_GetPinValue+0x66>
    10b2:	ca 01       	movw	r24, r20
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	89 83       	std	Y+1, r24	; 0x01
    10b8:	35 c0       	rjmp	.+106    	; 0x1124 <Dio_GetPinValue+0xe0>
	case GroupB: ret_value=Get_bit(PINB, PinNo); break;
    10ba:	e6 e3       	ldi	r30, 0x36	; 54
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a9 01       	movw	r20, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <Dio_GetPinValue+0x8e>
    10ce:	55 95       	asr	r21
    10d0:	47 95       	ror	r20
    10d2:	8a 95       	dec	r24
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <Dio_GetPinValue+0x8a>
    10d6:	ca 01       	movw	r24, r20
    10d8:	81 70       	andi	r24, 0x01	; 1
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	23 c0       	rjmp	.+70     	; 0x1124 <Dio_GetPinValue+0xe0>
	case GroupC: ret_value=Get_bit(PINC, PinNo); break;
    10de:	e3 e3       	ldi	r30, 0x33	; 51
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <Dio_GetPinValue+0xb2>
    10f2:	55 95       	asr	r21
    10f4:	47 95       	ror	r20
    10f6:	8a 95       	dec	r24
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <Dio_GetPinValue+0xae>
    10fa:	ca 01       	movw	r24, r20
    10fc:	81 70       	andi	r24, 0x01	; 1
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	11 c0       	rjmp	.+34     	; 0x1124 <Dio_GetPinValue+0xe0>
	case GroupD: ret_value=Get_bit(PIND, PinNo); break;
    1102:	e0 e3       	ldi	r30, 0x30	; 48
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a9 01       	movw	r20, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <Dio_GetPinValue+0xd6>
    1116:	55 95       	asr	r21
    1118:	47 95       	ror	r20
    111a:	8a 95       	dec	r24
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <Dio_GetPinValue+0xd2>
    111e:	ca 01       	movw	r24, r20
    1120:	81 70       	andi	r24, 0x01	; 1
    1122:	89 83       	std	Y+1, r24	; 0x01
	}

return ret_value;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <Timer_PWM_nit0>:
 *      Author: Ahmed hisham
 */
#include "..\\MCAL\\PWM_init.h"

void Timer_PWM_nit0(void)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
	//mode select: fast PWM
	set_bit(TCCR0,6);
    113e:	a3 e5       	ldi	r26, 0x53	; 83
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e3 e5       	ldi	r30, 0x53	; 83
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	80 64       	ori	r24, 0x40	; 64
    114a:	8c 93       	st	X, r24
	set_bit(TCCR0,3);
    114c:	a3 e5       	ldi	r26, 0x53	; 83
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e3 e5       	ldi	r30, 0x53	; 83
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	88 60       	ori	r24, 0x08	; 8
    1158:	8c 93       	st	X, r24
	//set it to non-inverted
	set_bit(TCCR0,5);
    115a:	a3 e5       	ldi	r26, 0x53	; 83
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e3 e5       	ldi	r30, 0x53	; 83
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	80 62       	ori	r24, 0x20	; 32
    1166:	8c 93       	st	X, r24
	//Prescalar 128
	set_bit(TCCR0,0);
    1168:	a3 e5       	ldi	r26, 0x53	; 83
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e3 e5       	ldi	r30, 0x53	; 83
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	81 60       	ori	r24, 0x01	; 1
    1174:	8c 93       	st	X, r24
	set_bit(TCCR0,2);
    1176:	a3 e5       	ldi	r26, 0x53	; 83
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e3 e5       	ldi	r30, 0x53	; 83
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	84 60       	ori	r24, 0x04	; 4
    1182:	8c 93       	st	X, r24
	//B3 OUTPUT
	Dio_SetPinDirection(GroupB,3,OUTPUT);
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	63 e0       	ldi	r22, 0x03	; 3
    1188:	41 e0       	ldi	r20, 0x01	; 1
    118a:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>

}
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <Timer_PWM_setDuty0>:
void Timer_PWM_setDuty0(u8 Duty_Percent)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	0f 92       	push	r0
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	89 83       	std	Y+1, r24	; 0x01
	OCR0=(Duty_Percent*255)/100;
    11a0:	ec e5       	ldi	r30, 0x5C	; 92
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	48 2f       	mov	r20, r24
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	ca 01       	movw	r24, r20
    11ac:	9c 01       	movw	r18, r24
    11ae:	22 0f       	add	r18, r18
    11b0:	33 1f       	adc	r19, r19
    11b2:	c9 01       	movw	r24, r18
    11b4:	96 95       	lsr	r25
    11b6:	98 2f       	mov	r25, r24
    11b8:	88 27       	eor	r24, r24
    11ba:	97 95       	ror	r25
    11bc:	87 95       	ror	r24
    11be:	82 1b       	sub	r24, r18
    11c0:	93 0b       	sbc	r25, r19
    11c2:	84 0f       	add	r24, r20
    11c4:	95 1f       	adc	r25, r21
    11c6:	24 e6       	ldi	r18, 0x64	; 100
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	b9 01       	movw	r22, r18
    11cc:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divmodhi4>
    11d0:	cb 01       	movw	r24, r22
    11d2:	80 83       	st	Z, r24
}
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <Hand_Init>:
#define Position1 450
#define Position2 500


void Hand_Init ()
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	 ADC_init();
    11e4:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_init>

}
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <Fingers>:
fingers Fingers ()
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	29 97       	sbiw	r28, 0x09	; 9
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61

u16 index = ADC_read(Channel4);
    1202:	84 e0       	ldi	r24, 0x04	; 4
    1204:	0e 94 c1 05 	call	0xb82	; 0xb82 <ADC_read>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	98 87       	std	Y+8, r25	; 0x08
    120e:	8f 83       	std	Y+7, r24	; 0x07
u16 middle = ADC_read(Channel5);
    1210:	85 e0       	ldi	r24, 0x05	; 5
    1212:	0e 94 c1 05 	call	0xb82	; 0xb82 <ADC_read>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	9e 83       	std	Y+6, r25	; 0x06
    121c:	8d 83       	std	Y+5, r24	; 0x05
u16 ring = ADC_read(Channel6);
    121e:	86 e0       	ldi	r24, 0x06	; 6
    1220:	0e 94 c1 05 	call	0xb82	; 0xb82 <ADC_read>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
u16 little = ADC_read(Channel7);
    122c:	87 e0       	ldi	r24, 0x07	; 7
    122e:	0e 94 c1 05 	call	0xb82	; 0xb82 <ADC_read>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9a 83       	std	Y+2, r25	; 0x02
    1238:	89 83       	std	Y+1, r24	; 0x01

if(index<threshold1 )		//less than == up , bigger than == down
    123a:	8f 81       	ldd	r24, Y+7	; 0x07
    123c:	98 85       	ldd	r25, Y+8	; 0x08
    123e:	21 e0       	ldi	r18, 0x01	; 1
    1240:	82 3c       	cpi	r24, 0xC2	; 194
    1242:	92 07       	cpc	r25, r18
    1244:	10 f4       	brcc	.+4      	; 0x124a <Fingers+0x5c>
{
	return INDEX ;
    1246:	19 86       	std	Y+9, r1	; 0x09
    1248:	1d c0       	rjmp	.+58     	; 0x1284 <Fingers+0x96>
}
else if(middle<threshold2)	//less than == up , bigger than == down
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	21 e0       	ldi	r18, 0x01	; 1
    1250:	86 3d       	cpi	r24, 0xD6	; 214
    1252:	92 07       	cpc	r25, r18
    1254:	18 f4       	brcc	.+6      	; 0x125c <Fingers+0x6e>
{

	return MIDDLE;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	89 87       	std	Y+9, r24	; 0x09
    125a:	14 c0       	rjmp	.+40     	; 0x1284 <Fingers+0x96>
}
else if ( ring<threshold3)	//less than == up , bigger than == down
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	9c 81       	ldd	r25, Y+4	; 0x04
    1260:	21 e0       	ldi	r18, 0x01	; 1
    1262:	84 3a       	cpi	r24, 0xA4	; 164
    1264:	92 07       	cpc	r25, r18
    1266:	18 f4       	brcc	.+6      	; 0x126e <Fingers+0x80>
{

	return RING;
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	89 87       	std	Y+9, r24	; 0x09
    126c:	0b c0       	rjmp	.+22     	; 0x1284 <Fingers+0x96>
}
else if( little<threshold4)	//less than == up , bigger than == down
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	86 3d       	cpi	r24, 0xD6	; 214
    1276:	92 07       	cpc	r25, r18
    1278:	18 f4       	brcc	.+6      	; 0x1280 <Fingers+0x92>
{

	return LITTLE;
    127a:	83 e0       	ldi	r24, 0x03	; 3
    127c:	89 87       	std	Y+9, r24	; 0x09
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <Fingers+0x96>
}
else
{
	return NONE;
    1280:	25 e0       	ldi	r18, 0x05	; 5
    1282:	29 87       	std	Y+9, r18	; 0x09
    1284:	89 85       	ldd	r24, Y+9	; 0x09
}

}
    1286:	29 96       	adiw	r28, 0x09	; 9
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <Thumb_Position>:
u8 Thumb_Position()
{u16 thumb = ADC_read(Channel0);
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <Thumb_Position+0x6>
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	80 e0       	ldi	r24, 0x00	; 0
    12a6:	0e 94 c1 05 	call	0xb82	; 0xb82 <ADC_read>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01
	if (thumb<Position1)
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	82 3c       	cpi	r24, 0xC2	; 194
    12ba:	92 07       	cpc	r25, r18
    12bc:	18 f4       	brcc	.+6      	; 0x12c4 <Thumb_Position+0x2c>
	{
		return 100;
    12be:	84 e6       	ldi	r24, 0x64	; 100
    12c0:	8b 83       	std	Y+3, r24	; 0x03
    12c2:	0b c0       	rjmp	.+22     	; 0x12da <Thumb_Position+0x42>
	}
	else if (thumb<Position2)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	9a 81       	ldd	r25, Y+2	; 0x02
    12c8:	21 e0       	ldi	r18, 0x01	; 1
    12ca:	84 3f       	cpi	r24, 0xF4	; 244
    12cc:	92 07       	cpc	r25, r18
    12ce:	18 f4       	brcc	.+6      	; 0x12d6 <Thumb_Position+0x3e>
	{
		return 75;
    12d0:	8b e4       	ldi	r24, 0x4B	; 75
    12d2:	8b 83       	std	Y+3, r24	; 0x03
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <Thumb_Position+0x42>
	}
	else
	{
		return 50;
    12d6:	22 e3       	ldi	r18, 0x32	; 50
    12d8:	2b 83       	std	Y+3, r18	; 0x03
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
	}

}
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <LCD_4bits_intial>:
 *      Author: Ahmed hisham
 */
#include "..\\HAL\\LCD_task_int.h"

void LCD_4bits_intial(void)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	e8 97       	sbiw	r28, 0x38	; 56
    12f2:	0f b6       	in	r0, 0x3f	; 63
    12f4:	f8 94       	cli
    12f6:	de bf       	out	0x3e, r29	; 62
    12f8:	0f be       	out	0x3f, r0	; 63
    12fa:	cd bf       	out	0x3d, r28	; 61
	Dio_SetPinDirection(GroupB,1,OUTPUT);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	41 e0       	ldi	r20, 0x01	; 1
    1302:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,2,OUTPUT);
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	62 e0       	ldi	r22, 0x02	; 2
    130a:	41 e0       	ldi	r20, 0x01	; 1
    130c:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB,3,OUTPUT);
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	63 e0       	ldi	r22, 0x03	; 3
    1314:	41 e0       	ldi	r20, 0x01	; 1
    1316:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,4,OUTPUT);
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	64 e0       	ldi	r22, 0x04	; 4
    131e:	41 e0       	ldi	r20, 0x01	; 1
    1320:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,5,OUTPUT);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	65 e0       	ldi	r22, 0x05	; 5
    1328:	41 e0       	ldi	r20, 0x01	; 1
    132a:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,6,OUTPUT);
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	66 e0       	ldi	r22, 0x06	; 6
    1332:	41 e0       	ldi	r20, 0x01	; 1
    1334:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA,7,OUTPUT);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	67 e0       	ldi	r22, 0x07	; 7
    133c:	41 e0       	ldi	r20, 0x01	; 1
    133e:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a8 e4       	ldi	r26, 0x48	; 72
    1348:	b2 e4       	ldi	r27, 0x42	; 66
    134a:	8d ab       	std	Y+53, r24	; 0x35
    134c:	9e ab       	std	Y+54, r25	; 0x36
    134e:	af ab       	std	Y+55, r26	; 0x37
    1350:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1352:	6d a9       	ldd	r22, Y+53	; 0x35
    1354:	7e a9       	ldd	r23, Y+54	; 0x36
    1356:	8f a9       	ldd	r24, Y+55	; 0x37
    1358:	98 ad       	ldd	r25, Y+56	; 0x38
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	4a e7       	ldi	r20, 0x7A	; 122
    1360:	55 e4       	ldi	r21, 0x45	; 69
    1362:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	89 ab       	std	Y+49, r24	; 0x31
    136c:	9a ab       	std	Y+50, r25	; 0x32
    136e:	ab ab       	std	Y+51, r26	; 0x33
    1370:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1372:	69 a9       	ldd	r22, Y+49	; 0x31
    1374:	7a a9       	ldd	r23, Y+50	; 0x32
    1376:	8b a9       	ldd	r24, Y+51	; 0x33
    1378:	9c a9       	ldd	r25, Y+52	; 0x34
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1386:	88 23       	and	r24, r24
    1388:	2c f4       	brge	.+10     	; 0x1394 <LCD_4bits_intial+0xac>
		__ticks = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	98 ab       	std	Y+48, r25	; 0x30
    1390:	8f a7       	std	Y+47, r24	; 0x2f
    1392:	3f c0       	rjmp	.+126    	; 0x1412 <LCD_4bits_intial+0x12a>
	else if (__tmp > 65535)
    1394:	69 a9       	ldd	r22, Y+49	; 0x31
    1396:	7a a9       	ldd	r23, Y+50	; 0x32
    1398:	8b a9       	ldd	r24, Y+51	; 0x33
    139a:	9c a9       	ldd	r25, Y+52	; 0x34
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	4f e7       	ldi	r20, 0x7F	; 127
    13a2:	57 e4       	ldi	r21, 0x47	; 71
    13a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	4c f5       	brge	.+82     	; 0x13fe <LCD_4bits_intial+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	6d a9       	ldd	r22, Y+53	; 0x35
    13ae:	7e a9       	ldd	r23, Y+54	; 0x36
    13b0:	8f a9       	ldd	r24, Y+55	; 0x37
    13b2:	98 ad       	ldd	r25, Y+56	; 0x38
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	98 ab       	std	Y+48, r25	; 0x30
    13d2:	8f a7       	std	Y+47, r24	; 0x2f
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <LCD_4bits_intial+0x10c>
    13d6:	80 e9       	ldi	r24, 0x90	; 144
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	9e a7       	std	Y+46, r25	; 0x2e
    13dc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13de:	8d a5       	ldd	r24, Y+45	; 0x2d
    13e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <LCD_4bits_intial+0xfa>
    13e6:	9e a7       	std	Y+46, r25	; 0x2e
    13e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ec:	98 a9       	ldd	r25, Y+48	; 0x30
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	98 ab       	std	Y+48, r25	; 0x30
    13f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13f6:	98 a9       	ldd	r25, Y+48	; 0x30
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <LCD_4bits_intial+0xee>
    13fc:	14 c0       	rjmp	.+40     	; 0x1426 <LCD_4bits_intial+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1400:	7a a9       	ldd	r23, Y+50	; 0x32
    1402:	8b a9       	ldd	r24, Y+51	; 0x33
    1404:	9c a9       	ldd	r25, Y+52	; 0x34
    1406:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	98 ab       	std	Y+48, r25	; 0x30
    1410:	8f a7       	std	Y+47, r24	; 0x2f
    1412:	8f a5       	ldd	r24, Y+47	; 0x2f
    1414:	98 a9       	ldd	r25, Y+48	; 0x30
    1416:	9c a7       	std	Y+44, r25	; 0x2c
    1418:	8b a7       	std	Y+43, r24	; 0x2b
    141a:	8b a5       	ldd	r24, Y+43	; 0x2b
    141c:	9c a5       	ldd	r25, Y+44	; 0x2c
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <LCD_4bits_intial+0x136>
    1422:	9c a7       	std	Y+44, r25	; 0x2c
    1424:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(50);

	LCD_Write_command(0x02);
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_Write_command>
	LCD_Write_command(0x28);
    142c:	88 e2       	ldi	r24, 0x28	; 40
    142e:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_Write_command>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a0 e8       	ldi	r26, 0x80	; 128
    1438:	bf e3       	ldi	r27, 0x3F	; 63
    143a:	8f a3       	std	Y+39, r24	; 0x27
    143c:	98 a7       	std	Y+40, r25	; 0x28
    143e:	a9 a7       	std	Y+41, r26	; 0x29
    1440:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1442:	6f a1       	ldd	r22, Y+39	; 0x27
    1444:	78 a5       	ldd	r23, Y+40	; 0x28
    1446:	89 a5       	ldd	r24, Y+41	; 0x29
    1448:	9a a5       	ldd	r25, Y+42	; 0x2a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	4a e7       	ldi	r20, 0x7A	; 122
    1450:	55 e4       	ldi	r21, 0x45	; 69
    1452:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	8b a3       	std	Y+35, r24	; 0x23
    145c:	9c a3       	std	Y+36, r25	; 0x24
    145e:	ad a3       	std	Y+37, r26	; 0x25
    1460:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1462:	6b a1       	ldd	r22, Y+35	; 0x23
    1464:	7c a1       	ldd	r23, Y+36	; 0x24
    1466:	8d a1       	ldd	r24, Y+37	; 0x25
    1468:	9e a1       	ldd	r25, Y+38	; 0x26
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e8       	ldi	r20, 0x80	; 128
    1470:	5f e3       	ldi	r21, 0x3F	; 63
    1472:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1476:	88 23       	and	r24, r24
    1478:	2c f4       	brge	.+10     	; 0x1484 <LCD_4bits_intial+0x19c>
		__ticks = 1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	9a a3       	std	Y+34, r25	; 0x22
    1480:	89 a3       	std	Y+33, r24	; 0x21
    1482:	3f c0       	rjmp	.+126    	; 0x1502 <LCD_4bits_intial+0x21a>
	else if (__tmp > 65535)
    1484:	6b a1       	ldd	r22, Y+35	; 0x23
    1486:	7c a1       	ldd	r23, Y+36	; 0x24
    1488:	8d a1       	ldd	r24, Y+37	; 0x25
    148a:	9e a1       	ldd	r25, Y+38	; 0x26
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	3f ef       	ldi	r19, 0xFF	; 255
    1490:	4f e7       	ldi	r20, 0x7F	; 127
    1492:	57 e4       	ldi	r21, 0x47	; 71
    1494:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1498:	18 16       	cp	r1, r24
    149a:	4c f5       	brge	.+82     	; 0x14ee <LCD_4bits_intial+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149c:	6f a1       	ldd	r22, Y+39	; 0x27
    149e:	78 a5       	ldd	r23, Y+40	; 0x28
    14a0:	89 a5       	ldd	r24, Y+41	; 0x29
    14a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e2       	ldi	r20, 0x20	; 32
    14aa:	51 e4       	ldi	r21, 0x41	; 65
    14ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	bc 01       	movw	r22, r24
    14b6:	cd 01       	movw	r24, r26
    14b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	9a a3       	std	Y+34, r25	; 0x22
    14c2:	89 a3       	std	Y+33, r24	; 0x21
    14c4:	0f c0       	rjmp	.+30     	; 0x14e4 <LCD_4bits_intial+0x1fc>
    14c6:	80 e9       	ldi	r24, 0x90	; 144
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	98 a3       	std	Y+32, r25	; 0x20
    14cc:	8f 8f       	std	Y+31, r24	; 0x1f
    14ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14d0:	98 a1       	ldd	r25, Y+32	; 0x20
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	f1 f7       	brne	.-4      	; 0x14d2 <LCD_4bits_intial+0x1ea>
    14d6:	98 a3       	std	Y+32, r25	; 0x20
    14d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14da:	89 a1       	ldd	r24, Y+33	; 0x21
    14dc:	9a a1       	ldd	r25, Y+34	; 0x22
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	9a a3       	std	Y+34, r25	; 0x22
    14e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e4:	89 a1       	ldd	r24, Y+33	; 0x21
    14e6:	9a a1       	ldd	r25, Y+34	; 0x22
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	69 f7       	brne	.-38     	; 0x14c6 <LCD_4bits_intial+0x1de>
    14ec:	14 c0       	rjmp	.+40     	; 0x1516 <LCD_4bits_intial+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ee:	6b a1       	ldd	r22, Y+35	; 0x23
    14f0:	7c a1       	ldd	r23, Y+36	; 0x24
    14f2:	8d a1       	ldd	r24, Y+37	; 0x25
    14f4:	9e a1       	ldd	r25, Y+38	; 0x26
    14f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9a a3       	std	Y+34, r25	; 0x22
    1500:	89 a3       	std	Y+33, r24	; 0x21
    1502:	89 a1       	ldd	r24, Y+33	; 0x21
    1504:	9a a1       	ldd	r25, Y+34	; 0x22
    1506:	9e 8f       	std	Y+30, r25	; 0x1e
    1508:	8d 8f       	std	Y+29, r24	; 0x1d
    150a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    150c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <LCD_4bits_intial+0x226>
    1512:	9e 8f       	std	Y+30, r25	; 0x1e
    1514:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);

	LCD_Write_command(0x0C);
    1516:	8c e0       	ldi	r24, 0x0C	; 12
    1518:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_Write_command>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a0 e8       	ldi	r26, 0x80	; 128
    1522:	bf e3       	ldi	r27, 0x3F	; 63
    1524:	89 8f       	std	Y+25, r24	; 0x19
    1526:	9a 8f       	std	Y+26, r25	; 0x1a
    1528:	ab 8f       	std	Y+27, r26	; 0x1b
    152a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152c:	69 8d       	ldd	r22, Y+25	; 0x19
    152e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1530:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1532:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	4a e7       	ldi	r20, 0x7A	; 122
    153a:	55 e4       	ldi	r21, 0x45	; 69
    153c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8d 8b       	std	Y+21, r24	; 0x15
    1546:	9e 8b       	std	Y+22, r25	; 0x16
    1548:	af 8b       	std	Y+23, r26	; 0x17
    154a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    154c:	6d 89       	ldd	r22, Y+21	; 0x15
    154e:	7e 89       	ldd	r23, Y+22	; 0x16
    1550:	8f 89       	ldd	r24, Y+23	; 0x17
    1552:	98 8d       	ldd	r25, Y+24	; 0x18
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e8       	ldi	r20, 0x80	; 128
    155a:	5f e3       	ldi	r21, 0x3F	; 63
    155c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1560:	88 23       	and	r24, r24
    1562:	2c f4       	brge	.+10     	; 0x156e <LCD_4bits_intial+0x286>
		__ticks = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9c 8b       	std	Y+20, r25	; 0x14
    156a:	8b 8b       	std	Y+19, r24	; 0x13
    156c:	3f c0       	rjmp	.+126    	; 0x15ec <LCD_4bits_intial+0x304>
	else if (__tmp > 65535)
    156e:	6d 89       	ldd	r22, Y+21	; 0x15
    1570:	7e 89       	ldd	r23, Y+22	; 0x16
    1572:	8f 89       	ldd	r24, Y+23	; 0x17
    1574:	98 8d       	ldd	r25, Y+24	; 0x18
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	57 e4       	ldi	r21, 0x47	; 71
    157e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1582:	18 16       	cp	r1, r24
    1584:	4c f5       	brge	.+82     	; 0x15d8 <LCD_4bits_intial+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1586:	69 8d       	ldd	r22, Y+25	; 0x19
    1588:	7a 8d       	ldd	r23, Y+26	; 0x1a
    158a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    158c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e2       	ldi	r20, 0x20	; 32
    1594:	51 e4       	ldi	r21, 0x41	; 65
    1596:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	9c 8b       	std	Y+20, r25	; 0x14
    15ac:	8b 8b       	std	Y+19, r24	; 0x13
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <LCD_4bits_intial+0x2e6>
    15b0:	80 e9       	ldi	r24, 0x90	; 144
    15b2:	91 e0       	ldi	r25, 0x01	; 1
    15b4:	9a 8b       	std	Y+18, r25	; 0x12
    15b6:	89 8b       	std	Y+17, r24	; 0x11
    15b8:	89 89       	ldd	r24, Y+17	; 0x11
    15ba:	9a 89       	ldd	r25, Y+18	; 0x12
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <LCD_4bits_intial+0x2d4>
    15c0:	9a 8b       	std	Y+18, r25	; 0x12
    15c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c4:	8b 89       	ldd	r24, Y+19	; 0x13
    15c6:	9c 89       	ldd	r25, Y+20	; 0x14
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	9c 8b       	std	Y+20, r25	; 0x14
    15cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ce:	8b 89       	ldd	r24, Y+19	; 0x13
    15d0:	9c 89       	ldd	r25, Y+20	; 0x14
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	69 f7       	brne	.-38     	; 0x15b0 <LCD_4bits_intial+0x2c8>
    15d6:	14 c0       	rjmp	.+40     	; 0x1600 <LCD_4bits_intial+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d8:	6d 89       	ldd	r22, Y+21	; 0x15
    15da:	7e 89       	ldd	r23, Y+22	; 0x16
    15dc:	8f 89       	ldd	r24, Y+23	; 0x17
    15de:	98 8d       	ldd	r25, Y+24	; 0x18
    15e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9c 8b       	std	Y+20, r25	; 0x14
    15ea:	8b 8b       	std	Y+19, r24	; 0x13
    15ec:	8b 89       	ldd	r24, Y+19	; 0x13
    15ee:	9c 89       	ldd	r25, Y+20	; 0x14
    15f0:	98 8b       	std	Y+16, r25	; 0x10
    15f2:	8f 87       	std	Y+15, r24	; 0x0f
    15f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f6:	98 89       	ldd	r25, Y+16	; 0x10
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <LCD_4bits_intial+0x310>
    15fc:	98 8b       	std	Y+16, r25	; 0x10
    15fe:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	LCD_Write_command(0x01);
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_Write_command>
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e0       	ldi	r26, 0x00	; 0
    160c:	b0 e4       	ldi	r27, 0x40	; 64
    160e:	8b 87       	std	Y+11, r24	; 0x0b
    1610:	9c 87       	std	Y+12, r25	; 0x0c
    1612:	ad 87       	std	Y+13, r26	; 0x0d
    1614:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1616:	6b 85       	ldd	r22, Y+11	; 0x0b
    1618:	7c 85       	ldd	r23, Y+12	; 0x0c
    161a:	8d 85       	ldd	r24, Y+13	; 0x0d
    161c:	9e 85       	ldd	r25, Y+14	; 0x0e
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	4a e7       	ldi	r20, 0x7A	; 122
    1624:	55 e4       	ldi	r21, 0x45	; 69
    1626:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	8f 83       	std	Y+7, r24	; 0x07
    1630:	98 87       	std	Y+8, r25	; 0x08
    1632:	a9 87       	std	Y+9, r26	; 0x09
    1634:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1636:	6f 81       	ldd	r22, Y+7	; 0x07
    1638:	78 85       	ldd	r23, Y+8	; 0x08
    163a:	89 85       	ldd	r24, Y+9	; 0x09
    163c:	9a 85       	ldd	r25, Y+10	; 0x0a
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	2c f4       	brge	.+10     	; 0x1658 <LCD_4bits_intial+0x370>
		__ticks = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9e 83       	std	Y+6, r25	; 0x06
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	3f c0       	rjmp	.+126    	; 0x16d6 <LCD_4bits_intial+0x3ee>
	else if (__tmp > 65535)
    1658:	6f 81       	ldd	r22, Y+7	; 0x07
    165a:	78 85       	ldd	r23, Y+8	; 0x08
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	3f ef       	ldi	r19, 0xFF	; 255
    1664:	4f e7       	ldi	r20, 0x7F	; 127
    1666:	57 e4       	ldi	r21, 0x47	; 71
    1668:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    166c:	18 16       	cp	r1, r24
    166e:	4c f5       	brge	.+82     	; 0x16c2 <LCD_4bits_intial+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1670:	6b 85       	ldd	r22, Y+11	; 0x0b
    1672:	7c 85       	ldd	r23, Y+12	; 0x0c
    1674:	8d 85       	ldd	r24, Y+13	; 0x0d
    1676:	9e 85       	ldd	r25, Y+14	; 0x0e
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e2       	ldi	r20, 0x20	; 32
    167e:	51 e4       	ldi	r21, 0x41	; 65
    1680:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	9e 83       	std	Y+6, r25	; 0x06
    1696:	8d 83       	std	Y+5, r24	; 0x05
    1698:	0f c0       	rjmp	.+30     	; 0x16b8 <LCD_4bits_intial+0x3d0>
    169a:	80 e9       	ldi	r24, 0x90	; 144
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	9c 83       	std	Y+4, r25	; 0x04
    16a0:	8b 83       	std	Y+3, r24	; 0x03
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	9c 81       	ldd	r25, Y+4	; 0x04
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <LCD_4bits_intial+0x3be>
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	9e 83       	std	Y+6, r25	; 0x06
    16b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ba:	9e 81       	ldd	r25, Y+6	; 0x06
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	69 f7       	brne	.-38     	; 0x169a <LCD_4bits_intial+0x3b2>
    16c0:	14 c0       	rjmp	.+40     	; 0x16ea <LCD_4bits_intial+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c2:	6f 81       	ldd	r22, Y+7	; 0x07
    16c4:	78 85       	ldd	r23, Y+8	; 0x08
    16c6:	89 85       	ldd	r24, Y+9	; 0x09
    16c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	9e 81       	ldd	r25, Y+6	; 0x06
    16da:	9a 83       	std	Y+2, r25	; 0x02
    16dc:	89 83       	std	Y+1, r24	; 0x01
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <LCD_4bits_intial+0x3fa>
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	LCD_Write_command(0x06);
    16ea:	86 e0       	ldi	r24, 0x06	; 6
    16ec:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_Write_command>

}
    16f0:	e8 96       	adiw	r28, 0x38	; 56
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <LCD_Write_command>:
void LCD_Write_command(u8 command)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	6d 97       	sbiw	r28, 0x1d	; 29
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	8d 8f       	std	Y+29, r24	; 0x1d
	Dio_SetPinValue(GroupB,1,LOW);
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	61 e0       	ldi	r22, 0x01	; 1
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
		Dio_SetPinValue(GroupB,2,LOW);
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	62 e0       	ldi	r22, 0x02	; 2
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>

		PORTA= (PORTA & 0x0F)|(command & 0xF0);
    172c:	ab e3       	ldi	r26, 0x3B	; 59
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	eb e3       	ldi	r30, 0x3B	; 59
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	98 2f       	mov	r25, r24
    1738:	9f 70       	andi	r25, 0x0F	; 15
    173a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    173c:	80 7f       	andi	r24, 0xF0	; 240
    173e:	89 2b       	or	r24, r25
    1740:	8c 93       	st	X, r24
		Dio_SetPinValue(GroupB,3,HIGH);
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	63 e0       	ldi	r22, 0x03	; 3
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	a0 e0       	ldi	r26, 0x00	; 0
    1752:	b0 e4       	ldi	r27, 0x40	; 64
    1754:	89 8f       	std	Y+25, r24	; 0x19
    1756:	9a 8f       	std	Y+26, r25	; 0x1a
    1758:	ab 8f       	std	Y+27, r26	; 0x1b
    175a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175c:	69 8d       	ldd	r22, Y+25	; 0x19
    175e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	4a e7       	ldi	r20, 0x7A	; 122
    176a:	55 e4       	ldi	r21, 0x45	; 69
    176c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	8d 8b       	std	Y+21, r24	; 0x15
    1776:	9e 8b       	std	Y+22, r25	; 0x16
    1778:	af 8b       	std	Y+23, r26	; 0x17
    177a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    177c:	6d 89       	ldd	r22, Y+21	; 0x15
    177e:	7e 89       	ldd	r23, Y+22	; 0x16
    1780:	8f 89       	ldd	r24, Y+23	; 0x17
    1782:	98 8d       	ldd	r25, Y+24	; 0x18
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	40 e8       	ldi	r20, 0x80	; 128
    178a:	5f e3       	ldi	r21, 0x3F	; 63
    178c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1790:	88 23       	and	r24, r24
    1792:	2c f4       	brge	.+10     	; 0x179e <LCD_Write_command+0x9c>
		__ticks = 1;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	9c 8b       	std	Y+20, r25	; 0x14
    179a:	8b 8b       	std	Y+19, r24	; 0x13
    179c:	3f c0       	rjmp	.+126    	; 0x181c <LCD_Write_command+0x11a>
	else if (__tmp > 65535)
    179e:	6d 89       	ldd	r22, Y+21	; 0x15
    17a0:	7e 89       	ldd	r23, Y+22	; 0x16
    17a2:	8f 89       	ldd	r24, Y+23	; 0x17
    17a4:	98 8d       	ldd	r25, Y+24	; 0x18
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	3f ef       	ldi	r19, 0xFF	; 255
    17aa:	4f e7       	ldi	r20, 0x7F	; 127
    17ac:	57 e4       	ldi	r21, 0x47	; 71
    17ae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17b2:	18 16       	cp	r1, r24
    17b4:	4c f5       	brge	.+82     	; 0x1808 <LCD_Write_command+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b6:	69 8d       	ldd	r22, Y+25	; 0x19
    17b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e2       	ldi	r20, 0x20	; 32
    17c4:	51 e4       	ldi	r21, 0x41	; 65
    17c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	9c 8b       	std	Y+20, r25	; 0x14
    17dc:	8b 8b       	std	Y+19, r24	; 0x13
    17de:	0f c0       	rjmp	.+30     	; 0x17fe <LCD_Write_command+0xfc>
    17e0:	80 e9       	ldi	r24, 0x90	; 144
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	9a 8b       	std	Y+18, r25	; 0x12
    17e6:	89 8b       	std	Y+17, r24	; 0x11
    17e8:	89 89       	ldd	r24, Y+17	; 0x11
    17ea:	9a 89       	ldd	r25, Y+18	; 0x12
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	f1 f7       	brne	.-4      	; 0x17ec <LCD_Write_command+0xea>
    17f0:	9a 8b       	std	Y+18, r25	; 0x12
    17f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f4:	8b 89       	ldd	r24, Y+19	; 0x13
    17f6:	9c 89       	ldd	r25, Y+20	; 0x14
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	9c 8b       	std	Y+20, r25	; 0x14
    17fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1800:	9c 89       	ldd	r25, Y+20	; 0x14
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	69 f7       	brne	.-38     	; 0x17e0 <LCD_Write_command+0xde>
    1806:	14 c0       	rjmp	.+40     	; 0x1830 <LCD_Write_command+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1808:	6d 89       	ldd	r22, Y+21	; 0x15
    180a:	7e 89       	ldd	r23, Y+22	; 0x16
    180c:	8f 89       	ldd	r24, Y+23	; 0x17
    180e:	98 8d       	ldd	r25, Y+24	; 0x18
    1810:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9c 8b       	std	Y+20, r25	; 0x14
    181a:	8b 8b       	std	Y+19, r24	; 0x13
    181c:	8b 89       	ldd	r24, Y+19	; 0x13
    181e:	9c 89       	ldd	r25, Y+20	; 0x14
    1820:	98 8b       	std	Y+16, r25	; 0x10
    1822:	8f 87       	std	Y+15, r24	; 0x0f
    1824:	8f 85       	ldd	r24, Y+15	; 0x0f
    1826:	98 89       	ldd	r25, Y+16	; 0x10
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCD_Write_command+0x126>
    182c:	98 8b       	std	Y+16, r25	; 0x10
    182e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		Dio_SetPinValue(GroupB,3,LOW);
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	63 e0       	ldi	r22, 0x03	; 3
    1834:	40 e0       	ldi	r20, 0x00	; 0
    1836:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>

		PORTA= (PORTA & 0x0F)|((command & 0x0F)<<4);
    183a:	ab e3       	ldi	r26, 0x3B	; 59
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	eb e3       	ldi	r30, 0x3B	; 59
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	28 2f       	mov	r18, r24
    1846:	2f 70       	andi	r18, 0x0F	; 15
    1848:	8d 8d       	ldd	r24, Y+29	; 0x1d
    184a:	88 2f       	mov	r24, r24
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	82 95       	swap	r24
    1850:	92 95       	swap	r25
    1852:	90 7f       	andi	r25, 0xF0	; 240
    1854:	98 27       	eor	r25, r24
    1856:	80 7f       	andi	r24, 0xF0	; 240
    1858:	98 27       	eor	r25, r24
    185a:	82 2b       	or	r24, r18
    185c:	8c 93       	st	X, r24
		Dio_SetPinValue(GroupB,3,HIGH);
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	63 e0       	ldi	r22, 0x03	; 3
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 e0       	ldi	r26, 0x00	; 0
    186e:	b0 e4       	ldi	r27, 0x40	; 64
    1870:	8b 87       	std	Y+11, r24	; 0x0b
    1872:	9c 87       	std	Y+12, r25	; 0x0c
    1874:	ad 87       	std	Y+13, r26	; 0x0d
    1876:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1878:	6b 85       	ldd	r22, Y+11	; 0x0b
    187a:	7c 85       	ldd	r23, Y+12	; 0x0c
    187c:	8d 85       	ldd	r24, Y+13	; 0x0d
    187e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a e7       	ldi	r20, 0x7A	; 122
    1886:	55 e4       	ldi	r21, 0x45	; 69
    1888:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	8f 83       	std	Y+7, r24	; 0x07
    1892:	98 87       	std	Y+8, r25	; 0x08
    1894:	a9 87       	std	Y+9, r26	; 0x09
    1896:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	5f e3       	ldi	r21, 0x3F	; 63
    18a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ac:	88 23       	and	r24, r24
    18ae:	2c f4       	brge	.+10     	; 0x18ba <LCD_Write_command+0x1b8>
		__ticks = 1;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	3f c0       	rjmp	.+126    	; 0x1938 <LCD_Write_command+0x236>
	else if (__tmp > 65535)
    18ba:	6f 81       	ldd	r22, Y+7	; 0x07
    18bc:	78 85       	ldd	r23, Y+8	; 0x08
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	4c f5       	brge	.+82     	; 0x1924 <LCD_Write_command+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e2       	ldi	r20, 0x20	; 32
    18e0:	51 e4       	ldi	r21, 0x41	; 65
    18e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9e 83       	std	Y+6, r25	; 0x06
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <LCD_Write_command+0x218>
    18fc:	80 e9       	ldi	r24, 0x90	; 144
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	9c 83       	std	Y+4, r25	; 0x04
    1902:	8b 83       	std	Y+3, r24	; 0x03
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_Write_command+0x206>
    190c:	9c 83       	std	Y+4, r25	; 0x04
    190e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1910:	8d 81       	ldd	r24, Y+5	; 0x05
    1912:	9e 81       	ldd	r25, Y+6	; 0x06
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	9e 83       	std	Y+6, r25	; 0x06
    1918:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191a:	8d 81       	ldd	r24, Y+5	; 0x05
    191c:	9e 81       	ldd	r25, Y+6	; 0x06
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	69 f7       	brne	.-38     	; 0x18fc <LCD_Write_command+0x1fa>
    1922:	14 c0       	rjmp	.+40     	; 0x194c <LCD_Write_command+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	6f 81       	ldd	r22, Y+7	; 0x07
    1926:	78 85       	ldd	r23, Y+8	; 0x08
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	9a 85       	ldd	r25, Y+10	; 0x0a
    192c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9e 83       	std	Y+6, r25	; 0x06
    1936:	8d 83       	std	Y+5, r24	; 0x05
    1938:	8d 81       	ldd	r24, Y+5	; 0x05
    193a:	9e 81       	ldd	r25, Y+6	; 0x06
    193c:	9a 83       	std	Y+2, r25	; 0x02
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_Write_command+0x242>
    1948:	9a 83       	std	Y+2, r25	; 0x02
    194a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		Dio_SetPinValue(GroupB,3,LOW);
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	63 e0       	ldi	r22, 0x03	; 3
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
}
    1956:	6d 96       	adiw	r28, 0x1d	; 29
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	f8 94       	cli
    195c:	de bf       	out	0x3e, r29	; 62
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	cd bf       	out	0x3d, r28	; 61
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <LCD_Write_data>:
void LCD_Write_data(u8 data)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	6d 97       	sbiw	r28, 0x1d	; 29
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	8d 8f       	std	Y+29, r24	; 0x1d
	Dio_SetPinValue(GroupB,1,HIGH);
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	61 e0       	ldi	r22, 0x01	; 1
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
		Dio_SetPinValue(GroupB,2,LOW);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	62 e0       	ldi	r22, 0x02	; 2
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>

		PORTA= (PORTA & 0x0F)|(data & 0xF0);
    1992:	ab e3       	ldi	r26, 0x3B	; 59
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	eb e3       	ldi	r30, 0x3B	; 59
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	98 2f       	mov	r25, r24
    199e:	9f 70       	andi	r25, 0x0F	; 15
    19a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a2:	80 7f       	andi	r24, 0xF0	; 240
    19a4:	89 2b       	or	r24, r25
    19a6:	8c 93       	st	X, r24
		Dio_SetPinValue(GroupB,3,HIGH);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	63 e0       	ldi	r22, 0x03	; 3
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a0 e0       	ldi	r26, 0x00	; 0
    19b8:	b0 e4       	ldi	r27, 0x40	; 64
    19ba:	89 8f       	std	Y+25, r24	; 0x19
    19bc:	9a 8f       	std	Y+26, r25	; 0x1a
    19be:	ab 8f       	std	Y+27, r26	; 0x1b
    19c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c2:	69 8d       	ldd	r22, Y+25	; 0x19
    19c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a e7       	ldi	r20, 0x7A	; 122
    19d0:	55 e4       	ldi	r21, 0x45	; 69
    19d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	8d 8b       	std	Y+21, r24	; 0x15
    19dc:	9e 8b       	std	Y+22, r25	; 0x16
    19de:	af 8b       	std	Y+23, r26	; 0x17
    19e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e2:	6d 89       	ldd	r22, Y+21	; 0x15
    19e4:	7e 89       	ldd	r23, Y+22	; 0x16
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	5f e3       	ldi	r21, 0x3F	; 63
    19f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	2c f4       	brge	.+10     	; 0x1a04 <LCD_Write_data+0x9c>
		__ticks = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9c 8b       	std	Y+20, r25	; 0x14
    1a00:	8b 8b       	std	Y+19, r24	; 0x13
    1a02:	3f c0       	rjmp	.+126    	; 0x1a82 <LCD_Write_data+0x11a>
	else if (__tmp > 65535)
    1a04:	6d 89       	ldd	r22, Y+21	; 0x15
    1a06:	7e 89       	ldd	r23, Y+22	; 0x16
    1a08:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	4c f5       	brge	.+82     	; 0x1a6e <LCD_Write_data+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	51 e4       	ldi	r21, 0x41	; 65
    1a2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9c 8b       	std	Y+20, r25	; 0x14
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <LCD_Write_data+0xfc>
    1a46:	80 e9       	ldi	r24, 0x90	; 144
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	9a 8b       	std	Y+18, r25	; 0x12
    1a4c:	89 8b       	std	Y+17, r24	; 0x11
    1a4e:	89 89       	ldd	r24, Y+17	; 0x11
    1a50:	9a 89       	ldd	r25, Y+18	; 0x12
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_Write_data+0xea>
    1a56:	9a 8b       	std	Y+18, r25	; 0x12
    1a58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	9c 8b       	std	Y+20, r25	; 0x14
    1a62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a64:	8b 89       	ldd	r24, Y+19	; 0x13
    1a66:	9c 89       	ldd	r25, Y+20	; 0x14
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <LCD_Write_data+0xde>
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <LCD_Write_data+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a70:	7e 89       	ldd	r23, Y+22	; 0x16
    1a72:	8f 89       	ldd	r24, Y+23	; 0x17
    1a74:	98 8d       	ldd	r25, Y+24	; 0x18
    1a76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9c 8b       	std	Y+20, r25	; 0x14
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
    1a84:	9c 89       	ldd	r25, Y+20	; 0x14
    1a86:	98 8b       	std	Y+16, r25	; 0x10
    1a88:	8f 87       	std	Y+15, r24	; 0x0f
    1a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8c:	98 89       	ldd	r25, Y+16	; 0x10
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_Write_data+0x126>
    1a92:	98 8b       	std	Y+16, r25	; 0x10
    1a94:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		Dio_SetPinValue(GroupB,3,LOW);
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	63 e0       	ldi	r22, 0x03	; 3
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>

		PORTA= (PORTA & 0x0F)|((data & 0x0F)<<4);
    1aa0:	ab e3       	ldi	r26, 0x3B	; 59
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	eb e3       	ldi	r30, 0x3B	; 59
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	28 2f       	mov	r18, r24
    1aac:	2f 70       	andi	r18, 0x0F	; 15
    1aae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ab0:	88 2f       	mov	r24, r24
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	82 95       	swap	r24
    1ab6:	92 95       	swap	r25
    1ab8:	90 7f       	andi	r25, 0xF0	; 240
    1aba:	98 27       	eor	r25, r24
    1abc:	80 7f       	andi	r24, 0xF0	; 240
    1abe:	98 27       	eor	r25, r24
    1ac0:	82 2b       	or	r24, r18
    1ac2:	8c 93       	st	X, r24
		Dio_SetPinValue(GroupB,3,HIGH);
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	63 e0       	ldi	r22, 0x03	; 3
    1ac8:	41 e0       	ldi	r20, 0x01	; 1
    1aca:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	a0 e0       	ldi	r26, 0x00	; 0
    1ad4:	b0 e4       	ldi	r27, 0x40	; 64
    1ad6:	8b 87       	std	Y+11, r24	; 0x0b
    1ad8:	9c 87       	std	Y+12, r25	; 0x0c
    1ada:	ad 87       	std	Y+13, r26	; 0x0d
    1adc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a e7       	ldi	r20, 0x7A	; 122
    1aec:	55 e4       	ldi	r21, 0x45	; 69
    1aee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	8f 83       	std	Y+7, r24	; 0x07
    1af8:	98 87       	std	Y+8, r25	; 0x08
    1afa:	a9 87       	std	Y+9, r26	; 0x09
    1afc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1afe:	6f 81       	ldd	r22, Y+7	; 0x07
    1b00:	78 85       	ldd	r23, Y+8	; 0x08
    1b02:	89 85       	ldd	r24, Y+9	; 0x09
    1b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e8       	ldi	r20, 0x80	; 128
    1b0c:	5f e3       	ldi	r21, 0x3F	; 63
    1b0e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b12:	88 23       	and	r24, r24
    1b14:	2c f4       	brge	.+10     	; 0x1b20 <LCD_Write_data+0x1b8>
		__ticks = 1;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
    1b1e:	3f c0       	rjmp	.+126    	; 0x1b9e <LCD_Write_data+0x236>
	else if (__tmp > 65535)
    1b20:	6f 81       	ldd	r22, Y+7	; 0x07
    1b22:	78 85       	ldd	r23, Y+8	; 0x08
    1b24:	89 85       	ldd	r24, Y+9	; 0x09
    1b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	3f ef       	ldi	r19, 0xFF	; 255
    1b2c:	4f e7       	ldi	r20, 0x7F	; 127
    1b2e:	57 e4       	ldi	r21, 0x47	; 71
    1b30:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b34:	18 16       	cp	r1, r24
    1b36:	4c f5       	brge	.+82     	; 0x1b8a <LCD_Write_data+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e2       	ldi	r20, 0x20	; 32
    1b46:	51 e4       	ldi	r21, 0x41	; 65
    1b48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	bc 01       	movw	r22, r24
    1b52:	cd 01       	movw	r24, r26
    1b54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	0f c0       	rjmp	.+30     	; 0x1b80 <LCD_Write_data+0x218>
    1b62:	80 e9       	ldi	r24, 0x90	; 144
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	9c 83       	std	Y+4, r25	; 0x04
    1b68:	8b 83       	std	Y+3, r24	; 0x03
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <LCD_Write_data+0x206>
    1b72:	9c 83       	std	Y+4, r25	; 0x04
    1b74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	9e 81       	ldd	r25, Y+6	; 0x06
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	69 f7       	brne	.-38     	; 0x1b62 <LCD_Write_data+0x1fa>
    1b88:	14 c0       	rjmp	.+40     	; 0x1bb2 <LCD_Write_data+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8c:	78 85       	ldd	r23, Y+8	; 0x08
    1b8e:	89 85       	ldd	r24, Y+9	; 0x09
    1b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	01 97       	sbiw	r24, 0x01	; 1
    1bac:	f1 f7       	brne	.-4      	; 0x1baa <LCD_Write_data+0x242>
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		Dio_SetPinValue(GroupB,3,LOW);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	63 e0       	ldi	r22, 0x03	; 3
    1bb6:	40 e0       	ldi	r20, 0x00	; 0
    1bb8:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
}
    1bbc:	6d 96       	adiw	r28, 0x1d	; 29
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <int2char>:
u8 int2char(u8 num)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	00 d0       	rcall	.+0      	; 0x1bd4 <int2char+0x6>
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    1bd8:	8a 83       	std	Y+2, r24	; 0x02
	u8 charact;
	if(num==1)
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	19 f4       	brne	.+6      	; 0x1be6 <int2char+0x18>
		charact='1';
    1be0:	81 e3       	ldi	r24, 0x31	; 49
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	32 c0       	rjmp	.+100    	; 0x1c4a <int2char+0x7c>
	else if(num==2)
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	19 f4       	brne	.+6      	; 0x1bf2 <int2char+0x24>
		charact='2';
    1bec:	82 e3       	ldi	r24, 0x32	; 50
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	2c c0       	rjmp	.+88     	; 0x1c4a <int2char+0x7c>
	else if(num==3)
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	19 f4       	brne	.+6      	; 0x1bfe <int2char+0x30>
		charact='3';
    1bf8:	83 e3       	ldi	r24, 0x33	; 51
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	26 c0       	rjmp	.+76     	; 0x1c4a <int2char+0x7c>
	else if(num==4)
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	84 30       	cpi	r24, 0x04	; 4
    1c02:	19 f4       	brne	.+6      	; 0x1c0a <int2char+0x3c>
		charact='4';
    1c04:	84 e3       	ldi	r24, 0x34	; 52
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	20 c0       	rjmp	.+64     	; 0x1c4a <int2char+0x7c>
	else if(num==5)
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	85 30       	cpi	r24, 0x05	; 5
    1c0e:	19 f4       	brne	.+6      	; 0x1c16 <int2char+0x48>
		charact='5';
    1c10:	85 e3       	ldi	r24, 0x35	; 53
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	1a c0       	rjmp	.+52     	; 0x1c4a <int2char+0x7c>
	else if(num==6)
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	86 30       	cpi	r24, 0x06	; 6
    1c1a:	19 f4       	brne	.+6      	; 0x1c22 <int2char+0x54>
		charact='6';
    1c1c:	86 e3       	ldi	r24, 0x36	; 54
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	14 c0       	rjmp	.+40     	; 0x1c4a <int2char+0x7c>
	else if(num==7)
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	87 30       	cpi	r24, 0x07	; 7
    1c26:	19 f4       	brne	.+6      	; 0x1c2e <int2char+0x60>
		charact='7';
    1c28:	87 e3       	ldi	r24, 0x37	; 55
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	0e c0       	rjmp	.+28     	; 0x1c4a <int2char+0x7c>
	else if(num==8)
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	88 30       	cpi	r24, 0x08	; 8
    1c32:	19 f4       	brne	.+6      	; 0x1c3a <int2char+0x6c>
		charact='8';
    1c34:	88 e3       	ldi	r24, 0x38	; 56
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	08 c0       	rjmp	.+16     	; 0x1c4a <int2char+0x7c>
	else if(num==9)
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	89 30       	cpi	r24, 0x09	; 9
    1c3e:	19 f4       	brne	.+6      	; 0x1c46 <int2char+0x78>
		charact='9';
    1c40:	89 e3       	ldi	r24, 0x39	; 57
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <int2char+0x7c>
	else
		charact='0';
    1c46:	80 e3       	ldi	r24, 0x30	; 48
    1c48:	89 83       	std	Y+1, r24	; 0x01
	return charact;
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <LCD_print>:
void LCD_print(u8 arr[])
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <LCD_print+0x6>
    1c5c:	0f 92       	push	r0
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	9b 83       	std	Y+3, r25	; 0x03
    1c64:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1c66:	19 82       	std	Y+1, r1	; 0x01
    1c68:	0e c0       	rjmp	.+28     	; 0x1c86 <LCD_print+0x30>
	while(arr[i]!='\0' && i<=16)
	{
		LCD_Write_data(arr[i]);
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	9b 81       	ldd	r25, Y+3	; 0x03
    1c74:	fc 01       	movw	r30, r24
    1c76:	e2 0f       	add	r30, r18
    1c78:	f3 1f       	adc	r31, r19
    1c7a:	80 81       	ld	r24, Z
    1c7c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
		i++;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	8f 5f       	subi	r24, 0xFF	; 255
    1c84:	89 83       	std	Y+1, r24	; 0x01
	return charact;
}
void LCD_print(u8 arr[])
{
	u8 i=0;
	while(arr[i]!='\0' && i<=16)
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c90:	fc 01       	movw	r30, r24
    1c92:	e2 0f       	add	r30, r18
    1c94:	f3 1f       	adc	r31, r19
    1c96:	80 81       	ld	r24, Z
    1c98:	88 23       	and	r24, r24
    1c9a:	19 f0       	breq	.+6      	; 0x1ca2 <LCD_print+0x4c>
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	81 31       	cpi	r24, 0x11	; 17
    1ca0:	20 f3       	brcs	.-56     	; 0x1c6a <LCD_print+0x14>
	{
		LCD_Write_data(arr[i]);
		i++;
	}
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	08 95       	ret

00001cae <arab_name>:
void arab_name(void)
{
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
	LCD_Write_command(0x40);
    1cb6:	80 e4       	ldi	r24, 0x40	; 64
    1cb8:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_Write_command>

			LCD_Write_data(0b00100);
    1cbc:	84 e0       	ldi	r24, 0x04	; 4
    1cbe:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00100);
    1cc2:	84 e0       	ldi	r24, 0x04	; 4
    1cc4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00100);
    1cc8:	84 e0       	ldi	r24, 0x04	; 4
    1cca:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00100);
    1cce:	84 e0       	ldi	r24, 0x04	; 4
    1cd0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00100);
    1cd4:	84 e0       	ldi	r24, 0x04	; 4
    1cd6:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00100);
    1cda:	84 e0       	ldi	r24, 0x04	; 4
    1cdc:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00100);
    1ce0:	84 e0       	ldi	r24, 0x04	; 4
    1ce2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00000);
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>

			LCD_Write_data(0b00000);
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b01100);
    1cf2:	8c e0       	ldi	r24, 0x0C	; 12
    1cf4:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00110);
    1cf8:	86 e0       	ldi	r24, 0x06	; 6
    1cfa:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00010);
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00001);
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b11111);
    1d0a:	8f e1       	ldi	r24, 0x1F	; 31
    1d0c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00000);
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00000);
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>

			LCD_Write_data(0b00000);
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00000);
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00000);
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b01110);
    1d2e:	8e e0       	ldi	r24, 0x0E	; 14
    1d30:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b10001);
    1d34:	81 e1       	ldi	r24, 0x11	; 17
    1d36:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b10001);
    1d3a:	81 e1       	ldi	r24, 0x11	; 17
    1d3c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b01110);
    1d40:	8e e0       	ldi	r24, 0x0E	; 14
    1d42:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00000);
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>

			LCD_Write_data(0b00000);
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00000);
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00000);
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00010);
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00010);
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b01111);
    1d6a:	8f e0       	ldi	r24, 0x0F	; 15
    1d6c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00000);
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
			LCD_Write_data(0b00000);
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	0e 94 b4 0c 	call	0x1968	; 0x1968 <LCD_Write_data>
}
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <LCD_num>:
void LCD_num(u16 num)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	62 97       	sbiw	r28, 0x12	; 18
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	9a 8b       	std	Y+18, r25	; 0x12
    1d98:	89 8b       	std	Y+17, r24	; 0x11
	u16 string[8];
	itoa(num,string,10);
    1d9a:	89 89       	ldd	r24, Y+17	; 0x11
    1d9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d9e:	9e 01       	movw	r18, r28
    1da0:	2f 5f       	subi	r18, 0xFF	; 255
    1da2:	3f 4f       	sbci	r19, 0xFF	; 255
    1da4:	b9 01       	movw	r22, r18
    1da6:	4a e0       	ldi	r20, 0x0A	; 10
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	0e 94 3f 11 	call	0x227e	; 0x227e <itoa>
	LCD_print(string);
    1dae:	ce 01       	movw	r24, r28
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LCD_print>
}
    1db6:	62 96       	adiw	r28, 0x12	; 18
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <Init_LED>:
#include "..\\MCAL\\DIO_REG.h"
#include "..\\MCAL\\Dio_Int.h"
#include "..\\MCAL\\Utilities.h"

void Init_LED (u8 LEDNO )
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	0f 92       	push	r0
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	89 83       	std	Y+1, r24	; 0x01
	if (LEDNO ==0)
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	88 23       	and	r24, r24
    1dd8:	31 f4       	brne	.+12     	; 0x1de6 <Init_LED+0x1e>
	{Dio_SetPinDirection(GroupC,PIN2,OUTPUT);}
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	62 e0       	ldi	r22, 0x02	; 2
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
    1de4:	11 c0       	rjmp	.+34     	; 0x1e08 <Init_LED+0x40>
	else if(LEDNO ==1)
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	81 30       	cpi	r24, 0x01	; 1
    1dea:	31 f4       	brne	.+12     	; 0x1df8 <Init_LED+0x30>
		{Dio_SetPinDirection(GroupC,PIN7,OUTPUT);}
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	67 e0       	ldi	r22, 0x07	; 7
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
    1df6:	08 c0       	rjmp	.+16     	; 0x1e08 <Init_LED+0x40>
	else if (LEDNO ==2)
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	82 30       	cpi	r24, 0x02	; 2
    1dfc:	29 f4       	brne	.+10     	; 0x1e08 <Init_LED+0x40>
		{Dio_SetPinDirection(GroupD,PIN3,OUTPUT);	}
    1dfe:	83 e0       	ldi	r24, 0x03	; 3
    1e00:	63 e0       	ldi	r22, 0x03	; 3
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
}
    1e08:	0f 90       	pop	r0
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <ON>:
void ON (u8 LEDNO)
{
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	0f 92       	push	r0
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	89 83       	std	Y+1, r24	; 0x01

	if (LEDNO == 0)
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	88 23       	and	r24, r24
    1e20:	31 f4       	brne	.+12     	; 0x1e2e <ON+0x1e>

		Dio_SetPinValue(GroupC,PIN2,HIGH);
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	62 e0       	ldi	r22, 0x02	; 2
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
    1e2c:	11 c0       	rjmp	.+34     	; 0x1e50 <ON+0x40>


	else if(LEDNO ==1)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	31 f4       	brne	.+12     	; 0x1e40 <ON+0x30>

		Dio_SetPinValue(GroupC,PIN7,HIGH);
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	67 e0       	ldi	r22, 0x07	; 7
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
    1e3e:	08 c0       	rjmp	.+16     	; 0x1e50 <ON+0x40>
	else if (LEDNO ==2)
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	82 30       	cpi	r24, 0x02	; 2
    1e44:	29 f4       	brne	.+10     	; 0x1e50 <ON+0x40>

		Dio_SetPinValue(GroupD,PIN3,HIGH);
    1e46:	83 e0       	ldi	r24, 0x03	; 3
    1e48:	63 e0       	ldi	r22, 0x03	; 3
    1e4a:	41 e0       	ldi	r20, 0x01	; 1
    1e4c:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>

}
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <OFF>:
void OFF(u8 LEDNO)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	0f 92       	push	r0
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	89 83       	std	Y+1, r24	; 0x01
	if (LEDNO ==0)
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	88 23       	and	r24, r24
    1e68:	31 f4       	brne	.+12     	; 0x1e76 <OFF+0x1e>

			Dio_SetPinValue(GroupC,PIN2,LOW);
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	62 e0       	ldi	r22, 0x02	; 2
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
    1e74:	11 c0       	rjmp	.+34     	; 0x1e98 <OFF+0x40>


			else if(LEDNO ==1)
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	31 f4       	brne	.+12     	; 0x1e88 <OFF+0x30>

				Dio_SetPinValue(GroupC,PIN7,LOW);
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	67 e0       	ldi	r22, 0x07	; 7
    1e80:	40 e0       	ldi	r20, 0x00	; 0
    1e82:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
    1e86:	08 c0       	rjmp	.+16     	; 0x1e98 <OFF+0x40>
			else if (LEDNO ==2)
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
    1e8a:	82 30       	cpi	r24, 0x02	; 2
    1e8c:	29 f4       	brne	.+10     	; 0x1e98 <OFF+0x40>

				Dio_SetPinValue(GroupD,PIN3,LOW);
    1e8e:	83 e0       	ldi	r24, 0x03	; 3
    1e90:	63 e0       	ldi	r22, 0x03	; 3
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>


}
    1e98:	0f 90       	pop	r0
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <motion_init>:
 *      Author: Ahmed hisham
 */
#include "..\\MCAL\\DIO_Int.h"

void motion_init(void)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
	// Enable 1
	Dio_SetPinDirection(GroupD,PIN4,INPUT);
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	64 e0       	ldi	r22, 0x04	; 4
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>

	// Enable 2
	Dio_SetPinDirection(GroupD,PIN5,INPUT);
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	65 e0       	ldi	r22, 0x05	; 5
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>

	// Motor 1
	Dio_SetPinDirection(GroupC,PIN3,OUTPUT);
    1ebc:	82 e0       	ldi	r24, 0x02	; 2
    1ebe:	63 e0       	ldi	r22, 0x03	; 3
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupC,PIN4,OUTPUT);
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	64 e0       	ldi	r22, 0x04	; 4
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>

	// Motor 2
	Dio_SetPinDirection(GroupC,PIN5,OUTPUT);
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	65 e0       	ldi	r22, 0x05	; 5
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupC,PIN6,OUTPUT);
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	66 e0       	ldi	r22, 0x06	; 6
    1ede:	41 e0       	ldi	r20, 0x01	; 1
    1ee0:	0e 94 1c 06 	call	0xc38	; 0xc38 <Dio_SetPinDirection>
	// initialize timers
	Timer_PWM_nit0();
    1ee4:	0e 94 9b 08 	call	0x1136	; 0x1136 <Timer_PWM_nit0>
}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <forward>:
void forward()
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinValue(GroupC,PIN3,HIGH);
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	63 e0       	ldi	r22, 0x03	; 3
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN4,LOW);
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	64 e0       	ldi	r22, 0x04	; 4
    1f04:	40 e0       	ldi	r20, 0x00	; 0
    1f06:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN5,HIGH);
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	65 e0       	ldi	r22, 0x05	; 5
    1f0e:	41 e0       	ldi	r20, 0x01	; 1
    1f10:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN6,LOW);
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	66 e0       	ldi	r22, 0x06	; 6
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
}
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <backward>:
void backward(void)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinValue(GroupC,PIN3,LOW);
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	63 e0       	ldi	r22, 0x03	; 3
    1f30:	40 e0       	ldi	r20, 0x00	; 0
    1f32:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN4,HIGH);
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	64 e0       	ldi	r22, 0x04	; 4
    1f3a:	41 e0       	ldi	r20, 0x01	; 1
    1f3c:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN5,LOW);
    1f40:	82 e0       	ldi	r24, 0x02	; 2
    1f42:	65 e0       	ldi	r22, 0x05	; 5
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN6,HIGH);
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	66 e0       	ldi	r22, 0x06	; 6
    1f4e:	41 e0       	ldi	r20, 0x01	; 1
    1f50:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
}
    1f54:	cf 91       	pop	r28
    1f56:	df 91       	pop	r29
    1f58:	08 95       	ret

00001f5a <right>:
void right(void)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinValue(GroupC,PIN3,LOW);
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	63 e0       	ldi	r22, 0x03	; 3
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN4,HIGH);
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	64 e0       	ldi	r22, 0x04	; 4
    1f70:	41 e0       	ldi	r20, 0x01	; 1
    1f72:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN5,HIGH);
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	65 e0       	ldi	r22, 0x05	; 5
    1f7a:	41 e0       	ldi	r20, 0x01	; 1
    1f7c:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN6,LOW);
    1f80:	82 e0       	ldi	r24, 0x02	; 2
    1f82:	66 e0       	ldi	r22, 0x06	; 6
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
}
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <left>:
void left(void)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinValue(GroupC,PIN3,HIGH);
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	63 e0       	ldi	r22, 0x03	; 3
    1f9c:	41 e0       	ldi	r20, 0x01	; 1
    1f9e:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN4,LOW);
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	64 e0       	ldi	r22, 0x04	; 4
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN5,LOW);
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	65 e0       	ldi	r22, 0x05	; 5
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN6,HIGH);
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	66 e0       	ldi	r22, 0x06	; 6
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
}
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <stop>:
void stop(void)
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinValue(GroupC,PIN3,LOW);
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	63 e0       	ldi	r22, 0x03	; 3
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN4,LOW);
    1fd8:	82 e0       	ldi	r24, 0x02	; 2
    1fda:	64 e0       	ldi	r22, 0x04	; 4
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN5,LOW);
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
    1fe4:	65 e0       	ldi	r22, 0x05	; 5
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
	Dio_SetPinValue(GroupC,PIN6,LOW);
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	66 e0       	ldi	r22, 0x06	; 6
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	0e 94 23 07 	call	0xe46	; 0xe46 <Dio_SetPinValue>
}
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <Variable_Speed>:
void Variable_Speed(u8 Duty)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	0f 92       	push	r0
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	89 83       	std	Y+1, r24	; 0x01
	Timer_PWM_setDuty0(Duty);
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	88 2f       	mov	r24, r24
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 ca 08 	call	0x1194	; 0x1194 <Timer_PWM_setDuty0>
}
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <UART_init>:
 *      Author: Ahmed hisham
 */
#include "..\\APP\\UART_int.h"

void UART_init(void)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
	//Enable UCSRC
	//set_bit(UCSRC,7);
	//Enable Rx
	set_bit(UCSRB,4);
    2022:	aa e2       	ldi	r26, 0x2A	; 42
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	ea e2       	ldi	r30, 0x2A	; 42
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	80 61       	ori	r24, 0x10	; 16
    202e:	8c 93       	st	X, r24
	//Enable Tx
	set_bit(UCSRB,3);
    2030:	aa e2       	ldi	r26, 0x2A	; 42
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ea e2       	ldi	r30, 0x2A	; 42
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	88 60       	ori	r24, 0x08	; 8
    203c:	8c 93       	st	X, r24
	//8-bits (Data)
	set_bit(UCSRC,1);
    203e:	a0 e4       	ldi	r26, 0x40	; 64
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e0 e4       	ldi	r30, 0x40	; 64
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	82 60       	ori	r24, 0x02	; 2
    204a:	8c 93       	st	X, r24
	set_bit(UCSRC,2);
    204c:	a0 e4       	ldi	r26, 0x40	; 64
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e0 e4       	ldi	r30, 0x40	; 64
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	84 60       	ori	r24, 0x04	; 4
    2058:	8c 93       	st	X, r24
	//No parity
	clr_bit(UCSRC,4);
    205a:	a0 e4       	ldi	r26, 0x40	; 64
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e0 e4       	ldi	r30, 0x40	; 64
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	8f 7e       	andi	r24, 0xEF	; 239
    2066:	8c 93       	st	X, r24
	clr_bit(UCSRC,5);
    2068:	a0 e4       	ldi	r26, 0x40	; 64
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e0 e4       	ldi	r30, 0x40	; 64
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	8f 7d       	andi	r24, 0xDF	; 223
    2074:	8c 93       	st	X, r24
	//single stop
	clr_bit(UCSRC,3);
    2076:	a0 e4       	ldi	r26, 0x40	; 64
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e0 e4       	ldi	r30, 0x40	; 64
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	87 7f       	andi	r24, 0xF7	; 247
    2082:	8c 93       	st	X, r24

	//baud rate = 9600
	UBRRH=0;
    2084:	e0 e4       	ldi	r30, 0x40	; 64
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	10 82       	st	Z, r1
	UBRRL = 103;
    208a:	e9 e2       	ldi	r30, 0x29	; 41
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	87 e6       	ldi	r24, 0x67	; 103
    2090:	80 83       	st	Z, r24

}
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <UART_Send>:

void UART_Send(u8 data)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	00 d0       	rcall	.+0      	; 0x209e <UART_Send+0x6>
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	89 83       	std	Y+1, r24	; 0x01
	//wait till transmission of buffer is empty
	while(Get_bit(UCSRA,5)!=1);
    20a4:	eb e2       	ldi	r30, 0x2B	; 43
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
	//send data
	UDR = data;
    20aa:	ec e2       	ldi	r30, 0x2C	; 44
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	80 83       	st	Z, r24

}
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <UART_Recieve>:

u8 UART_Recieve(void)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	0f 92       	push	r0
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
	//wait till receive is complete
	while(Get_bit(UCSRA,7)!=1);
    20c6:	eb e2       	ldi	r30, 0x2B	; 43
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
	//return data
	return UDR;
    20cc:	ec e2       	ldi	r30, 0x2C	; 44
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z

}
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <UART_Array_Send>:
void UART_Array_Send(u8 arr[])
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <UART_Array_Send+0x6>
    20e0:	0f 92       	push	r0
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	9b 83       	std	Y+3, r25	; 0x03
    20e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    20ea:	19 82       	std	Y+1, r1	; 0x01
    20ec:	0e c0       	rjmp	.+28     	; 0x210a <UART_Array_Send+0x30>
		while(arr[i]!='\0')
		{
			UART_Send(arr[i]);
    20ee:	89 81       	ldd	r24, Y+1	; 0x01
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	9b 81       	ldd	r25, Y+3	; 0x03
    20f8:	fc 01       	movw	r30, r24
    20fa:	e2 0f       	add	r30, r18
    20fc:	f3 1f       	adc	r31, r19
    20fe:	80 81       	ld	r24, Z
    2100:	0e 94 4c 10 	call	0x2098	; 0x2098 <UART_Send>
			i++;
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	8f 5f       	subi	r24, 0xFF	; 255
    2108:	89 83       	std	Y+1, r24	; 0x01

}
void UART_Array_Send(u8 arr[])
{
	u8 i=0;
		while(arr[i]!='\0')
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	9b 81       	ldd	r25, Y+3	; 0x03
    2114:	fc 01       	movw	r30, r24
    2116:	e2 0f       	add	r30, r18
    2118:	f3 1f       	adc	r31, r19
    211a:	80 81       	ld	r24, Z
    211c:	88 23       	and	r24, r24
    211e:	39 f7       	brne	.-50     	; 0x20ee <UART_Array_Send+0x14>
		{
			UART_Send(arr[i]);
			i++;
		}
}
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <main>:




void main(void)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <main+0x6>
    2132:	00 d0       	rcall	.+0      	; 0x2134 <main+0x8>
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
#ifdef testing
	LCD_4bits_intial();
#endif
	Init_LED (0);//For stop indication
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Init_LED>

	motion_init();
    213e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <motion_init>
	Hand_Init ();
    2142:	0e 94 ee 08 	call	0x11dc	; 0x11dc <Hand_Init>
	UART_init();
    2146:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_init>
			UART_Send((u16)string[2]);
			UART_Send((u16)string[3]);
		UART_Send('\n');

#endif
		u8 Speed= Thumb_Position();
    214a:	0e 94 4c 09 	call	0x1298	; 0x1298 <Thumb_Position>
    214e:	8a 83       	std	Y+2, r24	; 0x02
		fingers Condition = Fingers ();
    2150:	0e 94 f7 08 	call	0x11ee	; 0x11ee <Fingers>
    2154:	89 83       	std	Y+1, r24	; 0x01
 switch (Condition)
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	3c 83       	std	Y+4, r19	; 0x04
    215e:	2b 83       	std	Y+3, r18	; 0x03
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	91 05       	cpc	r25, r1
    2168:	01 f1       	breq	.+64     	; 0x21aa <main+0x7e>
    216a:	2b 81       	ldd	r18, Y+3	; 0x03
    216c:	3c 81       	ldd	r19, Y+4	; 0x04
    216e:	23 30       	cpi	r18, 0x03	; 3
    2170:	31 05       	cpc	r19, r1
    2172:	54 f4       	brge	.+20     	; 0x2188 <main+0x5c>
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	89 f0       	breq	.+34     	; 0x219e <main+0x72>
    217c:	2b 81       	ldd	r18, Y+3	; 0x03
    217e:	3c 81       	ldd	r19, Y+4	; 0x04
    2180:	21 30       	cpi	r18, 0x01	; 1
    2182:	31 05       	cpc	r19, r1
    2184:	79 f0       	breq	.+30     	; 0x21a4 <main+0x78>
    2186:	19 c0       	rjmp	.+50     	; 0x21ba <main+0x8e>
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	83 30       	cpi	r24, 0x03	; 3
    218e:	91 05       	cpc	r25, r1
    2190:	79 f0       	breq	.+30     	; 0x21b0 <main+0x84>
    2192:	2b 81       	ldd	r18, Y+3	; 0x03
    2194:	3c 81       	ldd	r19, Y+4	; 0x04
    2196:	25 30       	cpi	r18, 0x05	; 5
    2198:	31 05       	cpc	r19, r1
    219a:	69 f0       	breq	.+26     	; 0x21b6 <main+0x8a>
    219c:	0e c0       	rjmp	.+28     	; 0x21ba <main+0x8e>
 {case INDEX:
	 forward();
    219e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <forward>
    21a2:	0b c0       	rjmp	.+22     	; 0x21ba <main+0x8e>
	 break;
 case MIDDLE:
 	 backward();
    21a4:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <backward>
    21a8:	08 c0       	rjmp	.+16     	; 0x21ba <main+0x8e>
     break;
 case RING:
  	 right();
    21aa:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <right>
    21ae:	05 c0       	rjmp	.+10     	; 0x21ba <main+0x8e>
      break;
 case LITTLE:
  	 left();
    21b0:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <left>
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <main+0x8e>
      break;
 case NONE:
	 stop();
    21b6:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <stop>
	 break;

 }
 Variable_Speed(Speed);
    21ba:	8a 81       	ldd	r24, Y+2	; 0x02
    21bc:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <Variable_Speed>
    21c0:	c4 cf       	rjmp	.-120    	; 0x214a <main+0x1e>

000021c2 <__divmodhi4>:
    21c2:	97 fb       	bst	r25, 7
    21c4:	09 2e       	mov	r0, r25
    21c6:	07 26       	eor	r0, r23
    21c8:	0a d0       	rcall	.+20     	; 0x21de <__divmodhi4_neg1>
    21ca:	77 fd       	sbrc	r23, 7
    21cc:	04 d0       	rcall	.+8      	; 0x21d6 <__divmodhi4_neg2>
    21ce:	0c d0       	rcall	.+24     	; 0x21e8 <__udivmodhi4>
    21d0:	06 d0       	rcall	.+12     	; 0x21de <__divmodhi4_neg1>
    21d2:	00 20       	and	r0, r0
    21d4:	1a f4       	brpl	.+6      	; 0x21dc <__divmodhi4_exit>

000021d6 <__divmodhi4_neg2>:
    21d6:	70 95       	com	r23
    21d8:	61 95       	neg	r22
    21da:	7f 4f       	sbci	r23, 0xFF	; 255

000021dc <__divmodhi4_exit>:
    21dc:	08 95       	ret

000021de <__divmodhi4_neg1>:
    21de:	f6 f7       	brtc	.-4      	; 0x21dc <__divmodhi4_exit>
    21e0:	90 95       	com	r25
    21e2:	81 95       	neg	r24
    21e4:	9f 4f       	sbci	r25, 0xFF	; 255
    21e6:	08 95       	ret

000021e8 <__udivmodhi4>:
    21e8:	aa 1b       	sub	r26, r26
    21ea:	bb 1b       	sub	r27, r27
    21ec:	51 e1       	ldi	r21, 0x11	; 17
    21ee:	07 c0       	rjmp	.+14     	; 0x21fe <__udivmodhi4_ep>

000021f0 <__udivmodhi4_loop>:
    21f0:	aa 1f       	adc	r26, r26
    21f2:	bb 1f       	adc	r27, r27
    21f4:	a6 17       	cp	r26, r22
    21f6:	b7 07       	cpc	r27, r23
    21f8:	10 f0       	brcs	.+4      	; 0x21fe <__udivmodhi4_ep>
    21fa:	a6 1b       	sub	r26, r22
    21fc:	b7 0b       	sbc	r27, r23

000021fe <__udivmodhi4_ep>:
    21fe:	88 1f       	adc	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	5a 95       	dec	r21
    2204:	a9 f7       	brne	.-22     	; 0x21f0 <__udivmodhi4_loop>
    2206:	80 95       	com	r24
    2208:	90 95       	com	r25
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	08 95       	ret

00002210 <__prologue_saves__>:
    2210:	2f 92       	push	r2
    2212:	3f 92       	push	r3
    2214:	4f 92       	push	r4
    2216:	5f 92       	push	r5
    2218:	6f 92       	push	r6
    221a:	7f 92       	push	r7
    221c:	8f 92       	push	r8
    221e:	9f 92       	push	r9
    2220:	af 92       	push	r10
    2222:	bf 92       	push	r11
    2224:	cf 92       	push	r12
    2226:	df 92       	push	r13
    2228:	ef 92       	push	r14
    222a:	ff 92       	push	r15
    222c:	0f 93       	push	r16
    222e:	1f 93       	push	r17
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	ca 1b       	sub	r28, r26
    223a:	db 0b       	sbc	r29, r27
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	09 94       	ijmp

00002248 <__epilogue_restores__>:
    2248:	2a 88       	ldd	r2, Y+18	; 0x12
    224a:	39 88       	ldd	r3, Y+17	; 0x11
    224c:	48 88       	ldd	r4, Y+16	; 0x10
    224e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2250:	6e 84       	ldd	r6, Y+14	; 0x0e
    2252:	7d 84       	ldd	r7, Y+13	; 0x0d
    2254:	8c 84       	ldd	r8, Y+12	; 0x0c
    2256:	9b 84       	ldd	r9, Y+11	; 0x0b
    2258:	aa 84       	ldd	r10, Y+10	; 0x0a
    225a:	b9 84       	ldd	r11, Y+9	; 0x09
    225c:	c8 84       	ldd	r12, Y+8	; 0x08
    225e:	df 80       	ldd	r13, Y+7	; 0x07
    2260:	ee 80       	ldd	r14, Y+6	; 0x06
    2262:	fd 80       	ldd	r15, Y+5	; 0x05
    2264:	0c 81       	ldd	r16, Y+4	; 0x04
    2266:	1b 81       	ldd	r17, Y+3	; 0x03
    2268:	aa 81       	ldd	r26, Y+2	; 0x02
    226a:	b9 81       	ldd	r27, Y+1	; 0x01
    226c:	ce 0f       	add	r28, r30
    226e:	d1 1d       	adc	r29, r1
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	ed 01       	movw	r28, r26
    227c:	08 95       	ret

0000227e <itoa>:
    227e:	fb 01       	movw	r30, r22
    2280:	9f 01       	movw	r18, r30
    2282:	e8 94       	clt
    2284:	42 30       	cpi	r20, 0x02	; 2
    2286:	c4 f0       	brlt	.+48     	; 0x22b8 <itoa+0x3a>
    2288:	45 32       	cpi	r20, 0x25	; 37
    228a:	b4 f4       	brge	.+44     	; 0x22b8 <itoa+0x3a>
    228c:	4a 30       	cpi	r20, 0x0A	; 10
    228e:	29 f4       	brne	.+10     	; 0x229a <itoa+0x1c>
    2290:	97 fb       	bst	r25, 7
    2292:	1e f4       	brtc	.+6      	; 0x229a <itoa+0x1c>
    2294:	90 95       	com	r25
    2296:	81 95       	neg	r24
    2298:	9f 4f       	sbci	r25, 0xFF	; 255
    229a:	64 2f       	mov	r22, r20
    229c:	77 27       	eor	r23, r23
    229e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodhi4>
    22a2:	80 5d       	subi	r24, 0xD0	; 208
    22a4:	8a 33       	cpi	r24, 0x3A	; 58
    22a6:	0c f0       	brlt	.+2      	; 0x22aa <itoa+0x2c>
    22a8:	89 5d       	subi	r24, 0xD9	; 217
    22aa:	81 93       	st	Z+, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	a1 f7       	brne	.-24     	; 0x229a <itoa+0x1c>
    22b2:	16 f4       	brtc	.+4      	; 0x22b8 <itoa+0x3a>
    22b4:	5d e2       	ldi	r21, 0x2D	; 45
    22b6:	51 93       	st	Z+, r21
    22b8:	10 82       	st	Z, r1
    22ba:	c9 01       	movw	r24, r18
    22bc:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <strrev>

000022c0 <strrev>:
    22c0:	dc 01       	movw	r26, r24
    22c2:	fc 01       	movw	r30, r24
    22c4:	67 2f       	mov	r22, r23
    22c6:	71 91       	ld	r23, Z+
    22c8:	77 23       	and	r23, r23
    22ca:	e1 f7       	brne	.-8      	; 0x22c4 <strrev+0x4>
    22cc:	32 97       	sbiw	r30, 0x02	; 2
    22ce:	04 c0       	rjmp	.+8      	; 0x22d8 <strrev+0x18>
    22d0:	7c 91       	ld	r23, X
    22d2:	6d 93       	st	X+, r22
    22d4:	70 83       	st	Z, r23
    22d6:	62 91       	ld	r22, -Z
    22d8:	ae 17       	cp	r26, r30
    22da:	bf 07       	cpc	r27, r31
    22dc:	c8 f3       	brcs	.-14     	; 0x22d0 <strrev+0x10>
    22de:	08 95       	ret

000022e0 <_exit>:
    22e0:	f8 94       	cli

000022e2 <__stop_program>:
    22e2:	ff cf       	rjmp	.-2      	; 0x22e2 <__stop_program>
